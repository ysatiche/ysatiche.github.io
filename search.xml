<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>todolist</title>
    <url>/2021/07/16/todolist/</url>
    <content><![CDATA[<h1 id="fontend"><a href="#fontend" class="headerlink" title="fontend"></a>fontend</h1><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h2 id="互动（phaser，cocos）"><a href="#互动（phaser，cocos）" class="headerlink" title="互动（phaser，cocos）"></a>互动（phaser，cocos）</h2><h2 id="web项目（vue-react-webpack-electron"><a href="#web项目（vue-react-webpack-electron" class="headerlink" title="web项目（vue/react + webpack + electron)"></a>web项目（vue/react + webpack + electron)</h2><h2 id="canvas-笔记"><a href="#canvas-笔记" class="headerlink" title="canvas(笔记)"></a>canvas(笔记)</h2><h1 id="backend（go）"><a href="#backend（go）" class="headerlink" title="backend（go）"></a>backend（go）</h1><h2 id="语法基础-1"><a href="#语法基础-1" class="headerlink" title="语法基础"></a>语法基础</h2><h2 id="resetful服务（echo框架等）"><a href="#resetful服务（echo框架等）" class="headerlink" title="resetful服务（echo框架等）"></a>resetful服务（echo框架等）</h2><h2 id="docker-k8s布置"><a href="#docker-k8s布置" class="headerlink" title="docker/k8s布置"></a>docker/k8s布置</h2><h2 id="缓存-并发处理-（redis-rabbitmq-nginx）"><a href="#缓存-并发处理-（redis-rabbitmq-nginx）" class="headerlink" title="缓存/并发处理 （redis + rabbitmq + nginx）"></a>缓存/并发处理 （redis + rabbitmq + nginx）</h2><h1 id="deeplearning（python）"><a href="#deeplearning（python）" class="headerlink" title="deeplearning（python）"></a>deeplearning（python）</h1><h2 id="语法基础-2"><a href="#语法基础-2" class="headerlink" title="语法基础"></a>语法基础</h2><h2 id="deeplearn基础"><a href="#deeplearn基础" class="headerlink" title="deeplearn基础"></a>deeplearn基础</h2><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><h1 id="商业项目"><a href="#商业项目" class="headerlink" title="商业项目"></a>商业项目</h1><h2 id="动画IP显示"><a href="#动画IP显示" class="headerlink" title="动画IP显示"></a>动画IP显示</h2><ul>
<li><a href="./awesome-animation">教育动画展示</a> - </li>
</ul>
<h2 id="翻译小说"><a href="#翻译小说" class="headerlink" title="翻译小说"></a>翻译小说</h2><h2 id="摩比调研"><a href="#摩比调研" class="headerlink" title="摩比调研"></a>摩比调研</h2><ul>
<li><a href="./mobby-research">mobby-research</a> - 摩比调研</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mobby-research/readme</title>
    <url>/2021/07/16/mobby-research/readme/</url>
    <content><![CDATA[<h1 id="摩比爱数学"><a href="#摩比爱数学" class="headerlink" title="摩比爱数学"></a>摩比爱数学</h1><p>调研 【摩比爱数学】 【小学数学人教版】</p>
<h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><ul>
<li><p><a href="">mobby-actor.md</a> - 摩比形象</p>
</li>
<li><p><a href="">mobby-germination.md</a> - 摩比 【萌芽篇】</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mobby-research/mobby-germination</title>
    <url>/2021/07/16/mobby-research/mobby-germination/</url>
    <content><![CDATA[<h1 id="摩比萌芽篇"><a href="#摩比萌芽篇" class="headerlink" title="摩比萌芽篇"></a>摩比萌芽篇</h1><h2 id="火柴游戏"><a href="#火柴游戏" class="headerlink" title="火柴游戏"></a>火柴游戏</h2><p>使用 【火柴】道具来实现</p>
<blockquote>
<p>目的</p>
</blockquote>
<p>简单点数方法：按顺序，做标记</p>
<p>模仿拼摆：正方形，三角形，数字</p>
<p>图案变换：将图形放大，移动火柴改变图案</p>
<h2 id="平均分"><a href="#平均分" class="headerlink" title="平均分"></a>平均分</h2>]]></content>
  </entry>
  <entry>
    <title>test/test</title>
    <url>/2021/07/16/test/test/</url>
    <content><![CDATA[
import React, { Component, useState } from 'react'
import { useSelector, useDispatch } from 'react-redux'


const Main = () => {
  const [listName, setListName] = useState('')
  const todoList = useSelector(state => state.todoList)

  const dispatch = useDispatch()
  const addToDoList = () => {
    dispatch({
      type: 'ADD_TODOLIST',
      payload
    })
  }

  return (
    
  )
}



]]></content>
  </entry>
  <entry>
    <title>interview</title>
    <url>/2021/07/16/interview/</url>
    <content><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h2 id="链式调用实现"><a href="#链式调用实现" class="headerlink" title="链式调用实现"></a>链式调用实现</h2><h2 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h2><h2 id="二叉搜索树-返回一棵-平衡后-的二叉搜索树"><a href="#二叉搜索树-返回一棵-平衡后-的二叉搜索树" class="headerlink" title="二叉搜索树 返回一棵 平衡后 的二叉搜索树"></a>二叉搜索树 返回一棵 平衡后 的二叉搜索树</h2><h2 id="最大连续子序列的和"><a href="#最大连续子序列的和" class="headerlink" title="最大连续子序列的和"></a>最大连续子序列的和</h2><h2 id="js-和-ts的区别"><a href="#js-和-ts的区别" class="headerlink" title="js 和 ts的区别"></a>js 和 ts的区别</h2><h2 id="vue和react和jquery区别"><a href="#vue和react和jquery区别" class="headerlink" title="vue和react和jquery区别"></a>vue和react和jquery区别</h2><h2 id="webpack-使用"><a href="#webpack-使用" class="headerlink" title="webpack 使用"></a>webpack 使用</h2>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
  </entry>
  <entry>
    <title>fontend/readme</title>
    <url>/2021/07/16/fontend/readme/</url>
    <content><![CDATA[<h1 id="todolist"><a href="#todolist" class="headerlink" title="todolist"></a>todolist</h1><ul>
<li><p>vue 依赖收集</p>
</li>
<li><p>js多种继承</p>
</li>
</ul>
<h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><p>webpack/vue/react/qiankun</p>
<p>electron/weex/小程序</p>
<p>canvas/phaser/cocos</p>
]]></content>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2021/07/16/fontend/awesome-webpack/question-list/</url>
    <content><![CDATA[<h1 id="question-list"><a href="#question-list" class="headerlink" title="question list"></a>question list</h1><h2 id="webpack-中-target-含义"><a href="#webpack-中-target-含义" class="headerlink" title="webpack 中 target 含义"></a>webpack 中 target 含义</h2><p><code>target</code> 目标构建编译</p>
<p><code>web</code> <code>node</code> <code>electron-main</code> <code>electron-renderer</code></p>
<h2 id="webpack-中-resolve-alias-含义"><a href="#webpack-中-resolve-alias-含义" class="headerlink" title="webpack 中 resolve alias 含义"></a>webpack 中 resolve alias 含义</h2><h2 id="babel版本差异-核心几个库之间区别"><a href="#babel版本差异-核心几个库之间区别" class="headerlink" title="babel版本差异 核心几个库之间区别"></a>babel版本差异 核心几个库之间区别</h2><h2 id="webpack-打包成库和工程间有什么区别"><a href="#webpack-打包成库和工程间有什么区别" class="headerlink" title="webpack 打包成库和工程间有什么区别"></a>webpack 打包成库和工程间有什么区别</h2><p><code>output.libraryTarget</code> 将这个值赋予 <code>output.library</code></p>
<p>常见值：</p>
<blockquote>
<p>var</p>
</blockquote>
<p>将值作为变量声明导出</p>
<blockquote>
<p>window</p>
</blockquote>
<p>当 <code>library</code> 加载完成 入口起点的返回值分配给 window 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>[<span class="string">'MyLibrary'</span>] = _entry_return_</span><br><span class="line"><span class="built_in">window</span>.MyLibrary.doSomething()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>global</p>
</blockquote>
<blockquote>
<p>commonjs</p>
</blockquote>
<blockquote>
<p>amd</p>
</blockquote>
<blockquote>
<p>umd</p>
</blockquote>
<h2 id="webpack-external"><a href="#webpack-external" class="headerlink" title="webpack external"></a>webpack external</h2><p>externals 指定当前哪些库不被打入 bundle.js</p>
<p>所以需要自己额外引入</p>
<h2 id="webpack3-webpack4-之间区别"><a href="#webpack3-webpack4-之间区别" class="headerlink" title="webpack3 webpack4 之间区别"></a>webpack3 webpack4 之间区别</h2><ol>
<li><p>增加一个 mode: development | production</p>
</li>
<li><p>babel使用新命名空间 @babel</p>
</li>
<li><p>支持es6的方式导入JSON文件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2021/07/16/fontend/awesome-webpack/readme/</url>
    <content><![CDATA[<h1 id="blog-list"><a href="#blog-list" class="headerlink" title="blog list"></a>blog list</h1><ul>
<li><p><a href="">babel-loader.md</a> - loader的用法 babel-loader使用</p>
</li>
<li><p><a href="">question-list.md</a> - webpack相关问题列表</p>
</li>
<li><p><a href="">ast.md</a> - webpack 中AST语法树递归解析 解析源码</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="https://www.ershicimi.com/p/31512053e0b77396df07baa8da53c8bb" target="_blank" rel="noopener">实现一个简易的 webpack</a> - 实现一个简易的 webpack</p>
</li>
<li><p>[nice blog] <a href="https://juejin.im/post/6850418113901985805" target="_blank" rel="noopener">从实现一个简单的webpack中看广度深度算法</a> - 从实现一个简单的webpack中看广度深度算法 </p>
</li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-webpack/realize-simple-webpack</title>
    <url>/2021/07/16/fontend/awesome-webpack/realize-simple-webpack/</url>
    <content><![CDATA[<h1 id="实现一个简单的webpack"><a href="#实现一个简单的webpack" class="headerlink" title="实现一个简单的webpack"></a>实现一个简单的webpack</h1><h2 id="webpack流程图"><a href="#webpack流程图" class="headerlink" title="webpack流程图"></a>webpack流程图</h2><p><img src="./img/webpack.png" alt="webpack流程图"></p>
<blockquote>
<p>具体流程</p>
</blockquote>
<ol>
<li><p>利用babel完成代码转换，并生成单个文件的依赖: @bable/parse 可以生成 AST; @babel/traverse 进行AST遍历，记录依赖关系；最后用@babel/core和@babel/preset-env进行代码的转换</p>
</li>
<li><p>生成依赖图谱</p>
</li>
<li><p>生成最后打包代码</p>
</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote>
<p>第一步</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// npm install @babel/parse @babel/traverse @babel/core @babel/preset-env</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepOne</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// read file</span></span><br><span class="line">  <span class="keyword">const</span> ast = readFile(filename)</span><br><span class="line">  <span class="comment">// 遍历ast抽象语法</span></span><br><span class="line">  <span class="keyword">const</span> dependencies = traverseAST(ast)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过@babel/core 和 @babel/preset-env 进行代码的转换</span></span><br><span class="line">  <span class="keyword">const</span> &#123; code &#125; = babel.transformFromAst(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">    presets: [<span class="string">'@babel/preet-env'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回文件名称 依赖关系</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    filename,</span><br><span class="line">    dependencies,</span><br><span class="line">    code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> content = fs.readFileSync(filename, <span class="string">'utf-8'</span>)</span><br><span class="line">  <span class="keyword">const</span> ast = parser.parse(content, &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span> <span class="comment">// babel官方规定必须加这个参数 不然无法识别ES MODULE</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> ast</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseAST</span> (<span class="params">ast</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dependencies = &#123;&#125;</span><br><span class="line">  traverse(ast, &#123;</span><br><span class="line">    <span class="comment">// 获取通过import引入的模块</span></span><br><span class="line">    ImportDeclaration(&#123;code&#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> dirname = path.dirname(filename)</span><br><span class="line">      <span class="keyword">const</span> newFile = <span class="string">'./'</span> + path.join(dirname, node.source.value)</span><br><span class="line">      <span class="comment">// 保存所依赖的模块</span></span><br><span class="line">      dependencies[node.source.value] = newFile</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> dependencies</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第二步 生成相应的依赖图</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepTwo</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先拿到带有依赖的AST对象</span></span><br><span class="line">  <span class="keyword">const</span> entryModule = stepOne(entry)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用深度优先算法获取图谱</span></span><br><span class="line">  <span class="keyword">const</span> graphArray = getGraphArray(entryModule)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成2图谱</span></span><br><span class="line">  <span class="keyword">const</span> graph = getGraph(graphArray) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> graph</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGraphArray</span>(<span class="params">entryModule</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> graphArray = [entryModule]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; graphArray.length; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> item = graphArray[i];</span><br><span class="line">        <span class="keyword">const</span> &#123;dependencies&#125; = item;<span class="comment">//拿到文件所依赖的模块集合(键值对存储)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> dependencies)&#123;</span><br><span class="line">            graphArray.push(</span><br><span class="line">                one(dependencies[j])</span><br><span class="line">            )<span class="comment">//敲黑板！关键代码，目的是将入口模块及其所有相关的模块放入数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGraph</span>(<span class="params">graphArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> graph = &#123;&#125;</span><br><span class="line">  graphArray.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      graph[item.filename] = &#123;</span><br><span class="line">          dependencies: item.dependencies,</span><br><span class="line">          code: item.code</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> graph</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这里就应该大概知道代码是如何处理这种AST树的了，就和算法中处理二叉树是一样，找到规律，不断的循环</p>
<blockquote>
<p>第三步：生成代码字符串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepThree</span>(<span class="params">entry</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// //要先把对象转换为字符串，不然在下面的模板字符串中会默认调取对象的toString方法，参数变成[Object object],显然不行</span></span><br><span class="line">    <span class="keyword">const</span> graph = <span class="built_in">JSON</span>.stringify(stepTwo(entry))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        (function(graph) &#123;</span></span><br><span class="line"><span class="string">            //require函数的本质是执行一个模块的代码，然后将相应变量挂载到exports对象上</span></span><br><span class="line"><span class="string">            function require(module) &#123;</span></span><br><span class="line"><span class="string">                //localRequire的本质是拿到依赖包的exports变量</span></span><br><span class="line"><span class="string">                function localRequire(relativePath) &#123;</span></span><br><span class="line"><span class="string">                    return require(graph[module].dependencies[relativePath]);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                var exports = &#123;&#125;;</span></span><br><span class="line"><span class="string">                (function(require, exports, code) &#123;</span></span><br><span class="line"><span class="string">                    eval(code);</span></span><br><span class="line"><span class="string">                &#125;)(localRequire, exports, graph[module].code);</span></span><br><span class="line"><span class="string">                return exports;//函数返回指向局部变量，形成闭包，exports变量在函数执行后不会被摧毁</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            require('<span class="subst">$&#123;entry&#125;</span>')</span></span><br><span class="line"><span class="string">        &#125;)(<span class="subst">$&#123;graph&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以测试下：console.log(stepThree('./src/index.js'))</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2021/07/16/fontend/awesome-webpack/babel-loader/</url>
    <content><![CDATA[<h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><h2 id="loader-features"><a href="#loader-features" class="headerlink" title="loader features"></a>loader features</h2><ul>
<li><p>Loader can be chanied.</p>
</li>
<li><p>Loader can be synchronous or asynchronous</p>
</li>
<li><p>Loader run in nodejs</p>
</li>
<li><p>Loader can be configured with an options object</p>
</li>
</ul>
<h1 id="从-babel-loader-看如何实现一个简单-loader"><a href="#从-babel-loader-看如何实现一个简单-loader" class="headerlink" title="从 babel-loader 看如何实现一个简单 loader"></a>从 babel-loader 看如何实现一个简单 loader</h1><h2 id="laoder-interface"><a href="#laoder-interface" class="headerlink" title="laoder interface"></a>laoder interface</h2><p>A loader is just a JavaScript module that exports a function. The loader runner calls this function and passes the result of the previous loader or the resource file into it. The this context of the function is filled-in by webpack and the loader runner with some useful methods </p>
<h3 id="basic-loader-usage"><a href="#basic-loader-usage" class="headerlink" title="basic loader usage"></a>basic loader usage</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对source做一系列的转换</span></span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获得-loader-的options"><a href="#获得-loader-的options" class="headerlink" title="获得 loader 的options"></a>获得 loader 的options</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户为当前Loader传入的options</span></span><br><span class="line">    <span class="built_in">console</span>.log(loaderUtils.getOptions(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回其他结果"><a href="#返回其他结果" class="headerlink" title="返回其他结果"></a>返回其他结果</h3><p>如上，我们返回的是转换后的内容，但是有些情况下，我们不仅仅需要返回转换后的内容，还需要返回一些其他的内容，如sourceMap或是AST语法树，那么这时候我们可以使用webpack提供的APIthis.callback，当使用this.callback了，那么我们就必须需要在Loader函数返回undefined,以此来让webpack知道返回的结果在this.callback中，API详细参数如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.callback(</span><br><span class="line">  <span class="comment">// 无法装换原内容的Error</span></span><br><span class="line">  err: <span class="built_in">Error</span> || <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 装换后的内容，如上述的source</span></span><br><span class="line">  content: string | Buffer,</span><br><span class="line">  <span class="comment">// 用于通过转换后的内容得出原内容Source Map 方便调试</span></span><br><span class="line">  sourceMap?: SourceMap,</span><br><span class="line">  <span class="comment">// 如果本地转换同时ast语法树 也可以将这个ast返回</span></span><br><span class="line">  abstractSyncTree? AST</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>看看异步Loader在 <code>this.async</code> API下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="keyword">this</span>.async()</span><br><span class="line">  <span class="keyword">const</span> &#123; err, content, sourceMap, AST &#125; = <span class="keyword">await</span> Func()</span><br><span class="line">  callback(err, content, sourceMap, AST)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理二进制数据"><a href="#处理二进制数据" class="headerlink" title="处理二进制数据"></a>处理二进制数据</h3><p>像 <code>file-loader</code> 这样的loader，处理的是二进制数据，那么就需要告诉webpack给loader传入二进制格式的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Buffer) &#123;</span><br><span class="line">    <span class="keyword">return</span> source <span class="comment">// 当然我本身也可以返回二进制数据传给下一个loader</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.raw = <span class="literal">true</span> <span class="comment">// 不设置就会拿到字符串</span></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://webpack.js.org/concepts/loaders/" target="_blank" rel="noopener">webpack loader</a></p>
<p><a href="https://webpack.js.org/contribute/writing-a-loader/" target="_blank" rel="noopener">writing a loader</a></p>
<p><a href="https://webpack.js.org/api/loaders/" target="_blank" rel="noopener">loader interface</a></p>
<p><a href="https://juejin.im/post/6844903794371723277" target="_blank" rel="noopener">loader 简析</a></p>
]]></content>
      <categories>
        <category>web前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 Vuex</title>
    <url>/2021/07/16/fontend/awesome-vue/vue2-vuex/</url>
    <content><![CDATA[<h1 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h1><h2 id="shared-object"><a href="#shared-object" class="headerlink" title="shared object"></a>shared object</h2><p>if we want to have a shared object in more reuseful vue component.we can get the object out like this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="shared-object-to-be-reactivity"><a href="#shared-object-to-be-reactivity" class="headerlink" title="shared object to be reactivity"></a>shared object to be reactivity</h2><p>if <code>count</code> can be reactivity, using Vue, we know the data defined in vue is reactivity. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> state = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> () &#123;</span></span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line">      state.inc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>we can change the syntax style. make it more like vuex syntax</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> <span class="params">(&#123; state, mutations &#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    data: &#123; state &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      commit (mutationType) &#123;</span><br><span class="line"><span class="actionscript">        mutations[mutationType](<span class="keyword">this</span>.state)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> store = createStore(&#123;</span></span><br><span class="line">  state: &#123; count: 0 &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    inc (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, store.state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      store.commit(<span class="string">'inc'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue2</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 Route</title>
    <url>/2021/07/16/fontend/awesome-vue/vue2-route/</url>
    <content><![CDATA[<h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><h2 id="Basic-Route"><a href="#Basic-Route" class="headerlink" title="Basic Route"></a>Basic Route</h2><p>Simple route if we have a <code>&lt;a href=&quot;#bar&quot;&gt;&lt;/a&gt;</code> when we click it, we can notify window <code>hashchange</code> event.</p>
<p>Let’s do an simple EXERCISE.</p>
<ul>
<li><p>display foo component when url is #foo</p>
</li>
<li><p>display bar component when url is #bar</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">    foo: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    bar: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Using-Route-Table"><a href="#Using-Route-Table" class="headerlink" title="Using Route Table"></a>Using Route Table</h2><p>we can use route table to store route info.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;bar&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;foo&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;not found&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> routeTable = &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="string">'bar'</span>: Bar,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'foo'</span>: Foo,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'notfound'</span>: NotFound</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    h(routeTable[<span class="keyword">this</span>.url])</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Complex-Route-Rules"><a href="#Complex-Route-Rules" class="headerlink" title="Complex Route Rules"></a>Complex Route Rules</h2>]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue2</tag>
        <tag>route</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2021/07/16/fontend/awesome-webpack/ast/</url>
    <content><![CDATA[<h1 id="AST-语法树递归解析"><a href="#AST-语法树递归解析" class="headerlink" title="AST 语法树递归解析"></a>AST 语法树递归解析</h1><p>webpack 通过文件路径加载模块后，开始对源码进行解析，将其转换成AST语法树，我么需要babel一些包来进行转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">// babylon 主要就是把源码转化为 AST</span></span><br><span class="line"><span class="number">2</span><span class="comment">// @babel/traverse 遍历到对应的节点</span></span><br><span class="line"><span class="number">3</span><span class="comment">// @babel/types  遍历到的节点进行替换</span></span><br><span class="line"><span class="number">4</span><span class="comment">// @babel/generator 替换好的结果进行生成</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">yarn add babylon @babel/traverse @babel/types @babel/generator --save</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 2 * 功能: 解析源码 —— AST 解析语法树</span></span><br><span class="line"><span class="comment"> 3 * 1、babylon 主要就是把源码转化为 AST</span></span><br><span class="line"><span class="comment"> 4 * 2、@babel/traverse 遍历到对应的节点</span></span><br><span class="line"><span class="comment"> 5 * 3、@babel/types  遍历到的节点进行替换</span></span><br><span class="line"><span class="comment"> 6 * 4、@babel/generator 替换好的结果进行生成</span></span><br><span class="line"><span class="comment"> 7 * </span></span><br><span class="line"><span class="comment"> 8 * 例子：let str = require('./a.js')  =&gt; let str = __webpack_require__("./src\\a.js");</span></span><br><span class="line"><span class="comment"> 9 * </span></span><br><span class="line"><span class="comment">10 * @param &#123;*&#125; source 主入口源码内容</span></span><br><span class="line"><span class="comment">11 * @param &#123;*&#125; parentPath 目录路径 (./src)</span></span><br><span class="line"><span class="comment">12 */</span></span><br><span class="line"><span class="number">13</span> parse(source, parentPath)&#123;</span><br><span class="line"><span class="number">14</span>  <span class="keyword">let</span> ast = babylon.parse(source);</span><br><span class="line"><span class="number">15</span>  <span class="keyword">let</span> dependcies = []; <span class="comment">// 依赖数组</span></span><br><span class="line"><span class="number">16</span>  traverse(ast,&#123;</span><br><span class="line"><span class="number">17</span>    CallExpression(p)&#123;   <span class="comment">// 表达式调用，比如:require()</span></span><br><span class="line"><span class="number">18</span>      <span class="keyword">let</span> node = p.node; <span class="comment">// 获取到对应的节点</span></span><br><span class="line"><span class="number">19</span>      <span class="comment">// 如果当前解析的节点为 require 节点，然后对其改造</span></span><br><span class="line"><span class="number">20</span>      <span class="keyword">if</span>(node.callee.name === <span class="string">'require'</span>)&#123; </span><br><span class="line"><span class="number">21</span>        node.callee.name = <span class="string">"__webpack_require__"</span>;  <span class="comment">// 更改节点名字</span></span><br><span class="line"><span class="number">22</span>        <span class="keyword">let</span> moduleName = node.arguments[<span class="number">0</span>].value;<span class="comment">// 取到引入模块的名字</span></span><br><span class="line"><span class="number">23</span>        moduleName = moduleName + (path.extname(moduleName)?<span class="string">''</span>:<span class="string">'.js'</span>); <span class="comment">// 判断是够有扩展名，如果没有，则加上</span></span><br><span class="line"><span class="number">24</span>        moduleName = <span class="string">'./'</span> + path.join(parentPath, moduleName); <span class="comment">// 拼接名字(./src + ./a.js = ./src/a.js)</span></span><br><span class="line"><span class="number">25</span>        dependcies.push(moduleName);</span><br><span class="line"><span class="number">26</span>        node.arguments = [types.stringLiteral(moduleName)]; <span class="comment">// 改变对应的值</span></span><br><span class="line"><span class="number">27</span>      &#125;</span><br><span class="line"><span class="number">28</span>    &#125;</span><br><span class="line"><span class="number">29</span>  &#125;)</span><br><span class="line"><span class="number">30</span>  <span class="keyword">let</span> sourceCode = generator(ast).code;</span><br><span class="line"><span class="number">31</span>  <span class="keyword">return</span> &#123;sourceCode, dependcies&#125;</span><br><span class="line"><span class="number">32</span>&#125;</span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">34</span><span class="comment">/**</span></span><br><span class="line"><span class="comment">35 * 功能:构建模块</span></span><br><span class="line"><span class="comment">36 * @param &#123;*&#125; modulePath entry 入口文件路径</span></span><br><span class="line"><span class="comment">37 * @param &#123;*&#125; isEntry   是否为主模块的依赖入口</span></span><br><span class="line"><span class="comment">38 */</span></span><br><span class="line"><span class="number">39</span> buildModule(modulePath, isEntry)&#123;</span><br><span class="line"><span class="number">40</span>  <span class="comment">// 拿到模块的内容</span></span><br><span class="line"><span class="number">41</span>  <span class="keyword">let</span> source = <span class="keyword">this</span>.getSource(modulePath);</span><br><span class="line"><span class="number">42</span>  <span class="comment">// 模块 id modulePath = modulePath - this.root (打包后后的 key 为相对路径)</span></span><br><span class="line"><span class="number">43</span>  <span class="keyword">let</span> moduleName = <span class="string">'./'</span> + path.relative(<span class="keyword">this</span>.root, modulePath); <span class="comment">// src/index.js</span></span><br><span class="line"><span class="number">44</span></span><br><span class="line"><span class="number">45</span>  <span class="comment">// 判断当前是否为主入口</span></span><br><span class="line"><span class="number">46</span>  <span class="keyword">if</span>(isEntry)&#123;</span><br><span class="line"><span class="number">47</span>    <span class="keyword">this</span>.entryId = moduleName;</span><br><span class="line"><span class="number">48</span>  &#125;</span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">50</span>  <span class="comment">// 解析 需要把 source 源码进行改造,返回一个依赖列表</span></span><br><span class="line"><span class="number">51</span>  <span class="comment">// 1、解析 require 2、将引入的模块路径前加 ./src</span></span><br><span class="line"><span class="number">52</span>  <span class="keyword">let</span> &#123;sourceCode, dependcies&#125; = <span class="keyword">this</span>.parse(source, path.dirname(moduleName));  <span class="comment">// 取 ./src</span></span><br><span class="line"><span class="number">53</span></span><br><span class="line"><span class="number">54</span>  <span class="comment">// 装载模块(把相对路径和模块中的内容 对应起来)</span></span><br><span class="line"><span class="number">55</span>  <span class="keyword">this</span>.modules[moduleName] = sourceCode</span><br><span class="line"><span class="number">56</span></span><br><span class="line"><span class="number">57</span>  <span class="comment">// 递归，继续解析文件中的依赖文件 —— 附模块的加载</span></span><br><span class="line"><span class="number">58</span>  dependcies.forEach(<span class="function"><span class="params">depPath</span>=&gt;</span>&#123;</span><br><span class="line"><span class="number">59</span>    <span class="keyword">this</span>.buildModule(path.join(<span class="keyword">this</span>.root,depPath), <span class="literal">false</span>);</span><br><span class="line"><span class="number">60</span>  &#125;)</span><br><span class="line"><span class="number">61</span>&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>web前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 Plugin</title>
    <url>/2021/07/16/fontend/awesome-vue/vue2-plugin/</url>
    <content><![CDATA[<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><h2 id="write-plugins-in-vue2"><a href="#write-plugins-in-vue2" class="headerlink" title="write plugins in vue2"></a>write plugins in vue2</h2><p>there are two common methods to write plugins in vue2.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// plugin code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>and use Vue.mixins</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.mixin(options)</span><br></pre></td></tr></table></figure>

<h2 id="write-a-simple-validation-plugin"><a href="#write-a-simple-validation-plugin" class="headerlink" title="write a simple validation plugin"></a>write a simple validation plugin</h2><p>create a plugin that teaches Vue components to handle a custom “rules” option. The rules option expects an object that specifies validation rules for data in the component.</p>
<p>Expected usage:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">foo</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      validate: <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">1</span>,</span><br><span class="line">      message: <span class="string">'foo must be greater than one'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Solution</p>
<p>In vue2, you can use <code>this.$options.rule</code> to get <code>rule</code> defined in Vue.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RulesPlugin = &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.rules) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.$options.rules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rule = <span class="keyword">this</span>.$options.rules[key]</span><br><span class="line">            <span class="keyword">this</span>.$watch(key, newValue =&gt; &#123;</span><br><span class="line">              <span class="keyword">const</span> result = rule.validate(newValue)</span><br><span class="line">              <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(rule.message)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(RulesPlugin)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue2</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 Reactivity</title>
    <url>/2021/07/16/fontend/awesome-vue/vue2-reactivity/</url>
    <content><![CDATA[<h1 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h1><h2 id="what’s-reactivity"><a href="#what’s-reactivity" class="headerlink" title="what’s reactivity?"></a>what’s reactivity?</h2><p>let us show an example on relationship with variables.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// if we want b to change when a changed</span></span><br><span class="line">b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure>

<p>so if we have a function to exec when a changed. let us say.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onAChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b = a * <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>now, when we move to DOM.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cell b1"</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// when a change</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'cell.b'</span>).textContent = state.a * <span class="number">10</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// in other expression</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>in react.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line">setState(&#123; <span class="attr">a</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p>vue use <code>Object.defineProperty</code> to catch variable get and set.</p>
<blockquote>
<p><code>Object.defineProperty</code> basic usage</p>
</blockquote>
<p><code>Object.defineProperty(obj, prop, descriptor)</code></p>
<p><code>obj</code> object to defined prop.</p>
<p><code>prop</code> object prop to defined</p>
<p><code>descriptor</code> descriptor for defination</p>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'key'</span>, &#123;</span><br><span class="line">  <span class="comment">// enumerable: true if and only if the type of this property descriptor may be changed and </span></span><br><span class="line">  <span class="comment">// if the property may be deleted from the corresponding object</span></span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// configurable: true if and only if this property shows up during enumeration of the properties</span></span><br><span class="line">  <span class="comment">// on the corresponding object.</span></span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// writable: true if and only if the value associated with the property may be changed</span></span><br><span class="line">  <span class="comment">// with an assignment operator.</span></span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// A function which serves as a getter for the property, or undefined if there is no getter.</span></span><br><span class="line">  <span class="keyword">get</span> () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// A function which serves as a setter for the property, or undefined if there is no setter.</span></span><br><span class="line">  <span class="keyword">set</span> (newVal) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>we can take an exercise for <code>Object.defineProperty</code></p>
<h3 id="EXERCISE"><a href="#EXERCISE" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><p>Implement a convert function that</p>
<ul>
<li><p>take an Object as the argument</p>
</li>
<li><p>convert the Object’s property to place into getter/setters using Object.defineProperty.</p>
</li>
<li><p>The converted object should retain origin behavior, but at the sanme time log all the get/set operations.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalVal = obj[key]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;internalVal&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> internalVal</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;newValue&#125;</span>"`</span>)</span><br><span class="line">        internalVal = newValue </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if we want build a data reactivity system, as for a variable, we should know which other variable rely on this variable.Just like above</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>b</code> is rely on <code>a</code>.But where can we find these dependency, yep, we can catch it by <code>Object.defineProperty get</code> if <code>b</code> want to get <code>a</code>, now <code>b</code> is <code>a</code> dependency, we can catch <code>b</code> from <code>a</code> get function.</p>
</li>
<li><p>if we have collect <code>a</code> dependency, next thing is that we should nofity <code>a</code> all dependency to update when <code>a</code> changed(just like tell <code>b</code> that <code>a</code> is different, so you should update), where can we do thiese thing, yep we can do this in <code>a</code> set function.</p>
<p>these are two main rules in build reactivity system, you should undestand it.</p>
<p>But what really we do in vue2, please keep watching.</p>
</li>
</ul>
<h2 id="collect-dependency"><a href="#collect-dependency" class="headerlink" title="collect dependency"></a>collect dependency</h2><h3 id="EXERCISE-Dependency"><a href="#EXERCISE-Dependency" class="headerlink" title="EXERCISE Dependency"></a>EXERCISE Dependency</h3><ul>
<li><p>create Dep class with two methods: depend and notify</p>
</li>
<li><p>create an autorun function that takes an updater function.</p>
</li>
<li><p>Inside the update function, you can explicitly depend on an instance of Dep by calling dep.depend()</p>
</li>
<li><p>later, you can triggle the update function to run aigain by calling dep.notify()</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subcribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="set-watcher"><a href="#set-watcher" class="headerlink" title="set watcher"></a>set watcher</h2><h3 id="EXERCISE-Observer"><a href="#EXERCISE-Observer" class="headerlink" title="EXERCISE Observer"></a>EXERCISE Observer</h3><p>Combine the previous two functions, renaming convert() to observe() and keeping autorun():</p>
<ul>
<li><p>observe(): converts the properties in the received object and make them reactive.For each converted peroperty, it gets assigned a Dep instance which keeps tracks of a list of subscribing update function, and triggers them to re-run when its setter is invoked.</p>
</li>
<li><p>autorun(): takes an update function and re-runs it when properties that the update function subcribes to have been mutated. An update function is said to be “subscribe” to a property if it relies on that property during its evalution.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue2</tag>
        <tag>reactivity</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 Render</title>
    <url>/2021/07/16/fontend/awesome-vue/vue2-render/</url>
    <content><![CDATA[<h1 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h1><h2 id="what’s-render-include-DOM-and-virtual-DOM"><a href="#what’s-render-include-DOM-and-virtual-DOM" class="headerlink" title="what’s render?(include DOM and virtual DOM)"></a>what’s render?(include DOM and virtual DOM)</h2><p>Let’s see the Vue Reactivity System.</p>
<p><img src="../IMAGES/vue2-render-renderSystem.png" alt="Vue Reactivity System"></p>
<p>In Vue2, Template (when we write *.vue file) it would be</p>
<p>-&gt; (compiled into) Render Function</p>
<p>-&gt; (returns) Virtual DOM</p>
<p>-&gt; (generates) Actual DOM</p>
<p>so, what’s diffirence between Virtual DOM and Actual DOM</p>
<blockquote>
<p>Actual DOM</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"[Object HTMLDivElement]"</span> Browser Native <span class="built_in">Object</span> (expensive)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Virtual DOM</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$createElement(<span class="string">'div'</span>)</span><br><span class="line">&#123; <span class="attr">tag</span>: <span class="string">'div'</span>, <span class="attr">data</span>: &#123; <span class="attr">attrs</span>: &#123;&#125;&#125;, <span class="attr">children</span>: [] &#125; Plain Javascript <span class="built_in">Object</span> (cheap)</span><br></pre></td></tr></table></figure>

<p>As picture shows, vue2 use Component Render Function to generate Virtual DOM Tree, so we should understand Component Render Function first if we want to understand whole Vue Render System.</p>
<h2 id="Vue-Render-Function-API-usage"><a href="#Vue-Render-Function-API-usage" class="headerlink" title="Vue Render Function API usage"></a>Vue Render Function API usage</h2><p>Render Function <code>h()</code> in Vue is the Key Function to render DOM.</p>
<p>there are basic usages below.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">h(<span class="string">'div'</span>, <span class="string">'some text'</span>)</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span>, &#123; <span class="attr">class</span>: <span class="string">'foo'</span> &#125;, <span class="string">'some text'</span> )</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span> &#123; &#125;, [</span><br><span class="line">  <span class="string">'some text'</span>,</span><br><span class="line">  h(<span class="string">'span'</span>, <span class="string">'bar'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>h can directly render a component</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">h(MyComponent, &#123;</span><br><span class="line">  props: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Render Exercise in Vue2.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### EXERCISE render tags</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Implement the 'example' component which given the following usage:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>html</span><br><span class="line">&lt;example :tags=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>which renders the expected output:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Solution</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'tags'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>if example is a functional component, code may write like this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'tags'</span>]</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render (h, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, context.props.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE-render-Component"><a href="#EXERCISE-render-Component" class="headerlink" title="EXERCISE render Component"></a>EXERCISE render Component</h3><ul>
<li><p>Implement a Foo component wihich simple render <code>&lt;div&gt;foo&lt;/div&gt;</code>, and a Bar component which simple renders <code>&lt;div&gt;bar&lt;/div&gt;</code> (using render function obviously)</p>
</li>
<li><p>Implement an <example> component which renders the Foo component or the Bar component based on its <code>ok</code> prop. For <example> if ok is true, the final renderd dom should be <code>&lt;div&gt;foo&lt;/div&gt;</code></p>
</li>
<li><p>Implement a button in the root component that toggles <code>&lt;example&gt;</code> between <code>Foo</code> and <code>Bar</code> by controlling its <code>ok</code> prop.</p>
</li>
</ul>
<blockquote>
<p>Solution</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:ok</span>=<span class="string">"ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok = !ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Foo = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'foo'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Bar = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'bar'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'ok'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.ok ? h(Foo) : h(Bar)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    data: &#123; ok: <span class="literal">true</span> &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE-Higher-Order-Component"><a href="#EXERCISE-Higher-Order-Component" class="headerlink" title="EXERCISE Higher Order Component"></a>EXERCISE Higher Order Component</h3><ul>
<li><p>Implement a withAvatarURL helper which takes an inner component that expects a <code>url</code> prop, and return a higher-order component that accepts a <code>username</code> prop instead. The higher-order component should be responsible for fetching the curresponding svatar url from a mocked API.</p>
</li>
<li><p>Before the API returns, the higher-order component should be passing a placeholder URL <a href="http://test.com/test.png" target="_blank" rel="noopener">http://test.com/test.png</a> to the inner component.</p>
</li>
</ul>
<p>The exercise provides a base <code>Avatar</code> component. The usage should look like this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Solution</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">smart-avatar</span> <span class="attr">username</span>=<span class="string">"vuejs"</span>&gt;</span><span class="tag">&lt;/<span class="name">smart-avatar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fetchURL</span> <span class="params">(username, cb)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTiemout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">      cb(<span class="string">'http://test.url'</span>)</span></span><br><span class="line">    &#125;, 500)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Avatar = &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'src'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"src"</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">withAvatarURL</span> <span class="params">(InnerComponent)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'username'</span>],</span></span><br><span class="line">      created () &#123;</span><br><span class="line"><span class="actionscript">        fetchURL(<span class="keyword">this</span>.username, url =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.url = url</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; url: <span class="string">'http://test.com/test.png'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      render (h) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> h (Avatar, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line"><span class="actionscript">            src: <span class="keyword">this</span>.url</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    component: &#123; SmartAvatar &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue2</tag>
        <tag>render</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-vue/simple-vuex-demo</title>
    <url>/2021/07/16/fontend/awesome-vue/simple-vuex-demo/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapGetters</span>(<span class="params">getterNameArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!getterNameArray || !getterNameArray.length) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line">  getterNameArray.forEach(<span class="function"><span class="params">getterName</span> =&gt;</span> &#123;</span><br><span class="line">    getters[getterName] = <span class="function"><span class="params">()</span> =&gt;</span> service[getterName];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> getters;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapActions</span>(<span class="params">actionNameArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!actionNameArray || !actionNameArray.length) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line">  actionNameArray.forEach(<span class="function"><span class="params">actionName</span> =&gt;</span> &#123;</span><br><span class="line">    actions[actionName] = <span class="function">(<span class="params">...params</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> service[actionName](...params);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> actions;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; mapActions, mapGetters, service &#125;;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Vue Basic Intro</title>
    <url>/2021/07/16/fontend/awesome-vue/vue-basic/</url>
    <content><![CDATA[<h1 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h1><p>let us show an example on relationship with variables.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// if we want b to change when a changed</span></span><br><span class="line">b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure>

<p>so if we have a function to exec when a changed. let us say.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onAChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b = a * <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>now, when we move to DOM.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cell b1"</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// when a change</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'cell.b'</span>).textContent = state.a * <span class="number">10</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// in other expression</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>in react.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line">setState(&#123; <span class="attr">a</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE"><a href="#EXERCISE" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><p>Implement a convert function that</p>
<ul>
<li><p>take an Object as the argument</p>
</li>
<li><p>convert the Object’s property to place into getter/setters using Object.defineProperty.</p>
</li>
<li><p>The converted object should retain origin behavior, but at the sanme time log all the get/set operations.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalVal = obj[key]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;internalVal&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> internalVal</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;newValue&#125;</span>"`</span>)</span><br><span class="line">        internalVal = newValue </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE-Dependency"><a href="#EXERCISE-Dependency" class="headerlink" title="EXERCISE Dependency"></a>EXERCISE Dependency</h3><ul>
<li><p>create Dep class with two methods: depend and notify</p>
</li>
<li><p>create an autorun function that takes an updater function.</p>
</li>
<li><p>Inside the update function, you can explicitly depend on an instance of Dep by calling dep.depend()</p>
</li>
<li><p>later, you can triggle the update function to run aigain by calling dep.notify()</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subcribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE-Observer"><a href="#EXERCISE-Observer" class="headerlink" title="EXERCISE Observer"></a>EXERCISE Observer</h3><p>Combine the previous two functions, renaming convert() to observe() and keeping autorun():</p>
<ul>
<li><p>observe(): converts the properties in the received object and make them reactive.For each converted peroperty, it gets assigned a Dep instance which keeps tracks of a list of subscribing update function, and triggers them to re-run when its setter is invoked.</p>
</li>
<li><p>autorun(): takes an update function and re-runs it when properties that the update function subcribes to have been mutated. An update function is said to be “subscribe” to a property if it relies on that property during its evalution.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><p>two methods to write plugins</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// plugin code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.mixin(options)</span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE-simple-plugin"><a href="#EXERCISE-simple-plugin" class="headerlink" title="EXERCISE simple plugin"></a>EXERCISE simple plugin</h3><p>create a plugin that teaches Vue components to handle a custom “rules” option. The rules option expects an object that specifies validation rules for data in the component.</p>
<p>Expected usage:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> RulesPlugin = &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.rules) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.$options.rules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rule = <span class="keyword">this</span>.$options.rules[key]</span><br><span class="line">            <span class="keyword">this</span>.$watch(key, newValue =&gt; &#123;</span><br><span class="line">              <span class="keyword">const</span> result = rule.validate(newValue)</span><br><span class="line">              <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(rule.message)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(RulesPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">foo</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      validate: <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">1</span>,</span><br><span class="line">      message: <span class="string">'foo must be greater than one'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h1 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h1><p>Template<br>-&gt; (compiled into) Render Function<br>-&gt; (returns) Virtual DOM<br>-&gt; (generates) Actual DOM</p>
<blockquote>
<p>Actual DOM</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.createElement(&#39;div&#39;)</span><br><span class="line"></span><br><span class="line">&quot;[Object HTMLDivElement]&quot; Browser Native Object (expensive)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Virtual DOM</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.$createElement(&#39;div&#39;)</span><br><span class="line">&#123; tag: &#39;div&#39;, data: &#123; attrs: &#123;&#125;&#125;, children: [] &#125; Plain Javascript Object (cheap)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-Render-Function-API"><a href="#Vue-Render-Function-API" class="headerlink" title="Vue Render Function API"></a>Vue Render Function API</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;&#125;, [])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>examples</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">h(<span class="string">'div'</span>, <span class="string">'some text'</span>)</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span>, &#123; <span class="attr">class</span>: <span class="string">'foo'</span> &#125;, <span class="string">'some text'</span> )</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span> &#123; &#125;, [</span><br><span class="line">  <span class="string">'some text'</span>,</span><br><span class="line">  h(<span class="string">'span'</span>, <span class="string">'bar'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>h can directly render a component</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">h(MyComponent, &#123;</span><br><span class="line">  props: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE-render-tags"><a href="#EXERCISE-render-tags" class="headerlink" title="EXERCISE render tags"></a>EXERCISE render tags</h3><p>Implement the ‘example’ component which given the following usage:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>which renders the expected output:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Solution</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'tags'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>if example is a functional component, code may write like this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'tags'</span>]</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render (h, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, context.props.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="EXERCISE-render-Component"><a href="#EXERCISE-render-Component" class="headerlink" title="EXERCISE render Component"></a>EXERCISE render Component</h3><ul>
<li><p>Implement a Foo component wihich simple render <code>&lt;div&gt;foo&lt;/div&gt;</code>, and a Bar component which simple renders <code>&lt;div&gt;bar&lt;/div&gt;</code> (using render function obviously)</p>
</li>
<li><p>Implement an <example> component which renders the Foo component or the Bar component based on its <code>ok</code> prop. For <example> if ok is true, the final renderd dom should be <code>&lt;div&gt;foo&lt;/div&gt;</code></p>
</li>
<li><p>Implement a button in the root component that toggles <code>&lt;example&gt;</code> between <code>Foo</code> and <code>Bar</code> by controlling its <code>ok</code> prop.</p>
</li>
</ul>
<blockquote>
<p>Solution</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:ok</span>=<span class="string">"ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok = !ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Foo = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'foo'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Bar = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'bar'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'ok'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.ok ? h(Foo) : h(Bar)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    data: &#123; ok: <span class="literal">true</span> &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="EXERCISE-Higher-Order-Component"><a href="#EXERCISE-Higher-Order-Component" class="headerlink" title="EXERCISE Higher Order Component"></a>EXERCISE Higher Order Component</h3><ul>
<li><p>Implement a withAvatarURL helper which takes an inner component that expects a <code>url</code> prop, and return a higher-order component that accepts a <code>username</code> prop instead. The higher-order component should be responsible for fetching the curresponding svatar url from a mocked API.</p>
</li>
<li><p>Before the API returns, the higher-order component should be passing a placeholder URL <a href="http://test.com/test.png" target="_blank" rel="noopener">http://test.com/test.png</a> to the inner component.</p>
</li>
</ul>
<p>The exercise provides a base <code>Avatar</code> component. The usage should look like this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Solution</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">smart-avatar</span> <span class="attr">username</span>=<span class="string">"vuejs"</span>&gt;</span><span class="tag">&lt;/<span class="name">smart-avatar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fetchURL</span> <span class="params">(username, cb)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTiemout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">      cb(<span class="string">'http://test.url'</span>)</span></span><br><span class="line">    &#125;, 500)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Avatar = &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'src'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"src"</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">withAvatarURL</span> <span class="params">(InnerComponent)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'username'</span>],</span></span><br><span class="line">      created () &#123;</span><br><span class="line"><span class="actionscript">        fetchURL(<span class="keyword">this</span>.username, url =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.url = url</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; url: <span class="string">'http://test.com/test.png'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      render (h) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> h (Avatar, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line"><span class="actionscript">            src: <span class="keyword">this</span>.url</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    component: &#123; SmartAvatar &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h1><h3 id="shared-object"><a href="#shared-object" class="headerlink" title="shared object"></a>shared object</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>if <code>count</code> can be reactivity, using Vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> state = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> () &#123;</span></span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line">      state.inc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>we can use more vuex like sytax</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> <span class="params">(&#123; state, mutations &#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    data: &#123; state &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      commit (mutationType) &#123;</span><br><span class="line"><span class="actionscript">        mutations[mutationType](<span class="keyword">this</span>.state)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> store = createStore(&#123;</span></span><br><span class="line">  state: &#123; count: 0 &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    inc (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, store.state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      store.commit(<span class="string">'inc'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="vue-route"><a href="#vue-route" class="headerlink" title="vue route"></a>vue route</h1><h3 id="EXERCISE-1"><a href="#EXERCISE-1" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><ul>
<li><p>display foo component when url is #foo</p>
</li>
<li><p>display bar component when url is #bar</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">    foo: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    bar: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>using route table</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;bar&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;foo&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;not found&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> routeTable = &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="string">'bar'</span>: Bar,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'foo'</span>: Foo,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'notfound'</span>: NotFound</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    h(routeTable[<span class="keyword">this</span>.url])</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-vue/readme</title>
    <url>/2021/07/16/fontend/awesome-vue/readme/</url>
    <content><![CDATA[<h1 id="awesome-vue"><a href="#awesome-vue" class="headerlink" title="awesome-vue"></a>awesome-vue</h1><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><ul>
<li><a href="">simple-vuex-demo.md</a> - 实现一个简单的vuex例子</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-react/simple-react</title>
    <url>/2021/07/16/fontend/awesome-react/simple-react/</url>
    <content><![CDATA[<h1 id="simple-react"><a href="#simple-react" class="headerlink" title="simple-react"></a>simple-react</h1><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** @jsx DiyReact.createElement */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DiyReact = importFromBelow();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> randomLikes = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stories = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"React"</span>, <span class="attr">url</span>: <span class="string">"https://reactjs.org/"</span>, <span class="attr">likes</span>: randomLikes()&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Node"</span>, <span class="attr">url</span>: <span class="string">"https://nodejs.org/en/"</span>, <span class="attr">likes</span>: randomLikes()&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Webpack"</span>, <span class="attr">url</span>: <span class="string">"https://webpack.js.org/"</span>, <span class="attr">likes</span>: randomLikes()&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ItemRender = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;name, url&#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=&#123;url&#125;&gt;&#123;name&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends DiyReact.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;DiyReact Stories&lt;/</span>h1&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.stories.map(<span class="function"><span class="params">story</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Story</span> <span class="attr">name</span>=<span class="string">&#123;story.name&#125;</span> <span class="attr">url</span>=<span class="string">&#123;story.url&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">          &#125;)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  componentWillMount() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('execute componentWillMount');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('execute componentDidMount');</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  componentWillUnmount() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('execute componentWillUnmount');</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Story extends DiyReact.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props);</span></span><br><span class="line"><span class="regexp">    this.state = &#123; likes: Math.ceil(Math.random() * 100) &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  like() &#123;</span></span><br><span class="line"><span class="regexp">    this.setState(&#123;</span></span><br><span class="line"><span class="regexp">      likes: this.state.likes + 1</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; name, url &#125; = this.props;</span></span><br><span class="line"><span class="regexp">    const &#123; likes &#125; = this.state;</span></span><br><span class="line"><span class="regexp">    const likesElement = &lt;span /</span>&gt;;</span><br><span class="line">    <span class="keyword">const</span> itemRenderProps = &#123;name, url&#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; <span class="keyword">this</span>.like()&#125;&gt;&#123;likes&#125;&lt;b&gt;❤️&lt;<span class="regexp">/b&gt;&lt;/</span>button&gt;</span><br><span class="line">        &lt;ItemRender &#123;...itemRenderProps&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ shouldcomponentUpdate() &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   return true;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  componentWillUpdate() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('execute componentWillUpdate');</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  componentDidUpdate() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('execute componentDidUpdate');</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">DiyReact.render(&lt;App stories=&#123;stories&#125; /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼🌼 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">importFromBelow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TEXT_ELEMENT = <span class="string">'TEXT_ELEMENT'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateDomProperties</span>(<span class="params">dom, prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isEvent = <span class="function"><span class="params">name</span> =&gt;</span> name.startsWith(<span class="string">"on"</span>);</span><br><span class="line">    <span class="keyword">const</span> isAttribute = <span class="function"><span class="params">name</span> =&gt;</span> !isEvent(name) &amp;&amp; name != <span class="string">"children"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove event listeners</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(prevProps).filter(isEvent).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> eventType = name.toLowerCase().substring(<span class="number">2</span>);</span><br><span class="line">      dom.removeEventListener(eventType, prevProps[name]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove attributes</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(prevProps).filter(isAttribute).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      dom[name] = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set attributes</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(nextProps).filter(isAttribute).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      dom[name] = nextProps[name];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add event listeners</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(nextProps).filter(isEvent).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> eventType = name.toLowerCase().substring(<span class="number">2</span>);</span><br><span class="line">      dom.addEventListener(eventType, nextProps[name]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> rootInstance = <span class="literal">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, parentDom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> prevInstance = rootInstance;</span><br><span class="line">    <span class="keyword">const</span> nextInstance = reconcile(parentDom, prevInstance, element);</span><br><span class="line">    rootInstance = nextInstance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reconcile</span>(<span class="params">parentDom, instance, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newInstance = instantiate(element);</span><br><span class="line">      <span class="comment">// componentWillMount</span></span><br><span class="line">      newInstance.publicInstance</span><br><span class="line">        &amp;&amp; newInstance.publicInstance.componentWillMount</span><br><span class="line">        &amp;&amp; newInstance.publicInstance.componentWillMount();</span><br><span class="line">      parentDom.appendChild(newInstance.dom);</span><br><span class="line">      <span class="comment">// componentDidMount</span></span><br><span class="line">      newInstance.publicInstance</span><br><span class="line">        &amp;&amp; newInstance.publicInstance.componentDidMount</span><br><span class="line">        &amp;&amp; newInstance.publicInstance.componentDidMount();</span><br><span class="line">      <span class="keyword">return</span> newInstance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// componentWillUnmount</span></span><br><span class="line">      instance.publicInstance</span><br><span class="line">        &amp;&amp; instance.publicInstance.componentWillUnmount</span><br><span class="line">        &amp;&amp; instance.publicInstance.componentWillUnmount();</span><br><span class="line">      parentDom.removeChild(instance.dom);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance.element.type !== element.type) &#123;</span><br><span class="line">      <span class="keyword">const</span> newInstance = instantiate(element);</span><br><span class="line">      <span class="comment">// componentDidMount</span></span><br><span class="line">      newInstance.publicInstance</span><br><span class="line">        &amp;&amp; newInstance.publicInstance.componentDidMount</span><br><span class="line">        &amp;&amp; newInstance.publicInstance.componentDidMount();</span><br><span class="line">      parentDom.replaceChild(newInstance.dom, instance.dom);</span><br><span class="line">      <span class="keyword">return</span> newInstance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> element.type === <span class="string">'string'</span>) &#123;</span><br><span class="line">      updateDomProperties(instance.dom, instance.element.props, element.props);</span><br><span class="line">      instance.childInstances = reconcileChildren(instance, element);</span><br><span class="line">      instance.element = element;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance.publicInstance</span><br><span class="line">          &amp;&amp; instance.publicInstance.shouldcomponentUpdate) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance.publicInstance.shouldcomponentUpdate()) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// componentWillUpdate</span></span><br><span class="line">      instance.publicInstance</span><br><span class="line">        &amp;&amp; instance.publicInstance.componentWillUpdate</span><br><span class="line">        &amp;&amp; instance.publicInstance.componentWillUpdate();</span><br><span class="line">      instance.publicInstance.props = element.props;</span><br><span class="line">      <span class="keyword">const</span> newChildElement = instance.publicInstance.render();</span><br><span class="line">      <span class="keyword">const</span> oldChildInstance = instance.childInstance;</span><br><span class="line">      <span class="keyword">const</span> newChildInstance = reconcile(parentDom, oldChildInstance, newChildElement);</span><br><span class="line">      <span class="comment">// componentDidUpdate</span></span><br><span class="line">      instance.publicInstance</span><br><span class="line">        &amp;&amp; instance.publicInstance.componentDidUpdate</span><br><span class="line">        &amp;&amp; instance.publicInstance.componentDidUpdate();</span><br><span class="line">      instance.dom = newChildInstance.dom;</span><br><span class="line">      instance.childInstance = newChildInstance;</span><br><span class="line">      instance.element = element;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reconcileChildren</span>(<span class="params">instance, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;dom, childInstances&#125; = instance;</span><br><span class="line">    <span class="keyword">const</span> newChildElements = element.props.children || [];</span><br><span class="line">    <span class="keyword">const</span> count = <span class="built_in">Math</span>.max(childInstances.length, newChildElements.length);</span><br><span class="line">    <span class="keyword">const</span> newChildInstances = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      newChildInstances[i] = reconcile(dom, childInstances[i], newChildElements[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newChildInstances.filter(<span class="function"><span class="params">instance</span> =&gt;</span> instance !== <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">instantiate</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, props = &#123;&#125;&#125; = element;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> isDomElement = <span class="keyword">typeof</span> type === <span class="string">'string'</span>;</span><br><span class="line">    <span class="keyword">const</span> isClassElement = !!(type.prototype &amp;&amp; type.prototype.isReactComponent);</span><br><span class="line">    <span class="keyword">if</span> (isDomElement) &#123;</span><br><span class="line">      <span class="comment">// 创建dom</span></span><br><span class="line">      <span class="keyword">const</span> isTextElement = type === TEXT_ELEMENT;</span><br><span class="line">      <span class="keyword">const</span> dom = isTextElement ? <span class="built_in">document</span>.createTextNode(<span class="string">''</span>) : <span class="built_in">document</span>.createElement(type);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置dom的事件、数据属性</span></span><br><span class="line">      updateDomProperties(dom, [], element.props);</span><br><span class="line">      <span class="keyword">const</span> children = props.children || [];</span><br><span class="line">      <span class="keyword">const</span> childInstances = children.map(instantiate);</span><br><span class="line">      <span class="keyword">const</span> childDoms = childInstances.map(<span class="function"><span class="params">childInstance</span> =&gt;</span> childInstance.dom);</span><br><span class="line">      childDoms.forEach(<span class="function"><span class="params">childDom</span> =&gt;</span> dom.appendChild(childDom));</span><br><span class="line">      <span class="keyword">const</span> instance = &#123;element, dom, childInstances&#125;;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isClassElement) &#123;</span><br><span class="line">      <span class="keyword">const</span> instance = &#123;&#125;;</span><br><span class="line">      <span class="keyword">const</span> publicInstance = createPublicInstance(element, instance);</span><br><span class="line">      <span class="keyword">const</span> childElement = publicInstance.render();</span><br><span class="line">      <span class="keyword">const</span> childInstance = instantiate(childElement);</span><br><span class="line">      <span class="built_in">Object</span>.assign(instance, &#123;<span class="attr">dom</span>: childInstance.dom, element, childInstance, publicInstance&#125;);</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> childElement = type(element.props);</span><br><span class="line">      <span class="keyword">const</span> childInstance = instantiate(childElement);</span><br><span class="line">      <span class="keyword">const</span> instance = &#123;</span><br><span class="line">        dom: childInstance.dom,</span><br><span class="line">        element,</span><br><span class="line">        childInstance</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createTextElement</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(TEXT_ELEMENT, &#123;<span class="attr">nodeValue</span>: value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">    props = <span class="built_in">Object</span>.assign(&#123;&#125;, props);</span><br><span class="line">    props.children = [].concat(...children)</span><br><span class="line">      .filter(<span class="function"><span class="params">child</span> =&gt;</span> child != <span class="literal">null</span> &amp;&amp; child !== <span class="literal">false</span>)</span><br><span class="line">      .map(<span class="function"><span class="params">child</span> =&gt;</span> child <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? child : createTextElement(child));</span><br><span class="line">    <span class="keyword">return</span> &#123;type, props&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createPublicInstance</span>(<span class="params">element, instance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, props&#125; = element;</span><br><span class="line">    <span class="keyword">const</span> publicInstance = <span class="keyword">new</span> type(props);</span><br><span class="line">    publicInstance.__internalInstance = instance;</span><br><span class="line">    <span class="keyword">return</span> publicInstance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props = props;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="keyword">this</span>.state || &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    setState(partialState) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.state, partialState);</span><br><span class="line">      <span class="comment">// update instance</span></span><br><span class="line">      <span class="keyword">const</span> parentDom = <span class="keyword">this</span>.__internalInstance.dom.parentNode;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="keyword">this</span>.__internalInstance.element;</span><br><span class="line">      reconcile(parentDom, <span class="keyword">this</span>.__internalInstance, element);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Component.prototype.isReactComponent = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    render,</span><br><span class="line">    createElement,</span><br><span class="line">    Component</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-react/redux-and-hooks</title>
    <url>/2021/07/16/fontend/awesome-react/redux-and-hooks/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://medium.com/enjoy-life-enjoy-coding/react-redux-%E5%B0%8F%E5%AD%A9%E5%AD%90%E6%89%8D%E5%81%9A%E9%81%B8%E6%93%87-hooks-%E5%92%8C-redux-%E6%88%91%E5%85%A8%E9%83%BD%E8%A6%81-1fdd226f5d99" target="_blank" rel="noopener">Hooks 和 Redux </a> - Hooks 和 Redux </li>
</ul>
<h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h2><ol>
<li>为什么要实现 redux ?</li>
</ol>
<p>不是父子组件间的状态同步</p>
<ol start="2">
<li>redux 和全局变量有什么区别</li>
</ol>
<blockquote>
<p>规范</p>
</blockquote>
<p>redux 的变量易于管理（比如可以得到旧的state）可预测的状态管理容器</p>
<p>而全局变量是直接改变 当然也可以封装</p>
<ol start="3">
<li>redux 核心概念</li>
</ol>
<blockquote>
<p>store</p>
</blockquote>
<blockquote>
<p>action</p>
</blockquote>
<blockquote>
<p>reducer</p>
</blockquote>
<p><img src="./img/redux-intro.png" alt="redux-intro"></p>
<p><img src="./img/redux-flow.png" alt="redux-flow"></p>
<p><img src="./img/redux-advantage.png" alt="redux-advantage"></p>
<ol start="4">
<li>redux vs vuex</li>
</ol>
<blockquote>
<p>都是基于flux</p>
</blockquote>
<blockquote>
<p>vuex 是对vue的一层封装只能再vue中使用 redux更通用</p>
</blockquote>
<blockquote>
<p>两者实现异步的方式不一样 [TODO]</p>
</blockquote>
<p>Reudx 三个原则</p>
<p>（1）单一数据源（一个Redux应用只有一个store），也是单向的数据流；<br>（2）state只读（唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。）；<br>（3）使用纯函数（reducer）来修改state。</p>
<p>Vuex 三大原则</p>
<p>a. 应用层级的状态应该集中到单个 store 对象中。<br>b. 提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。<br>c. 异步逻辑都应该封装到 action 里面。</p>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-react/readme</title>
    <url>/2021/07/16/fontend/awesome-react/readme/</url>
    <content><![CDATA[<h1 id="project"><a href="#project" class="headerlink" title="project"></a>project</h1><blockquote>
<p><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="noopener">https://github.com/enaqx/awesome-react</a></p>
</blockquote>
<h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><ul>
<li><p><a href="">redux-and-hooks.md</a> - redux and hooks</p>
</li>
<li><p><a href="https://blog.fundebug.com/2018/12/22/implement-react-with-200-lines-code/" target="_blank" rel="noopener">200行代码实现简版React</a> - 200行代码实现简版React</p>
</li>
</ul>
<h2 id="react-组件库"><a href="#react-组件库" class="headerlink" title="react 组件库"></a>react 组件库</h2><ul>
<li><a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">project</a> A UI Design Language and React UI library </li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>qiankun</title>
    <url>/2021/07/16/fontend/awesome-qiankun/readme/</url>
    <content><![CDATA[<h1 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h1><blockquote>
<p>微前端框架</p>
</blockquote>
<h2 id="git地址"><a href="#git地址" class="headerlink" title="git地址"></a>git地址</h2><p><a href="https://github.com/umijs/qiankun" target="_blank" rel="noopener">https://github.com/umijs/qiankun</a></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="single-spa"><a href="#single-spa" class="headerlink" title="single-spa"></a>single-spa</h3><p><a href="https://github.com/single-spa/single-spa" target="_blank" rel="noopener">https://github.com/single-spa/single-spa</a></p>
<h3 id="为什么不用iframe？"><a href="#为什么不用iframe？" class="headerlink" title="为什么不用iframe？"></a>为什么不用iframe？</h3><p><a href="https://www.yuque.com/kuitos/gky7yw/gesexv" target="_blank" rel="noopener">https://www.yuque.com/kuitos/gky7yw/gesexv</a></p>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p><a href="https://github.com/umijs/qiankun/examples" target="_blank" rel="noopener">https://github.com/umijs/qiankun/examples</a></p>
]]></content>
      <categories>
        <category>web前端</category>
        <category>qiankun</category>
      </categories>
      <tags>
        <tag>qiankun</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-js/readme</title>
    <url>/2021/07/16/fontend/awesome-js/readme/</url>
    <content><![CDATA[<h1 id="awesome-js"><a href="#awesome-js" class="headerlink" title="awesome-js"></a>awesome-js</h1><ul>
<li><p><a href="">js继承</a> - js 实现继承的几种方式.</p>
</li>
<li><p><a href="">js常见函数实现</a> - js常见函数实现</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Phaser</title>
    <url>/2021/07/16/fontend/awesome-phaser/phaser-intro/</url>
    <content><![CDATA[<h1 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h1>]]></content>
      <categories>
        <category>web前端</category>
        <category>phaser</category>
      </categories>
      <tags>
        <tag>phaser</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-qiankun/qiankun-usage</title>
    <url>/2021/07/16/fontend/awesome-qiankun/qiankun-usage/</url>
    <content><![CDATA[<h1 id="qiankun-使用"><a href="#qiankun-使用" class="headerlink" title="qiankun 使用"></a>qiankun 使用</h1><blockquote>
<p>参考文章</p>
</blockquote>
<p><a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noopener">https://qiankun.umijs.org/zh/guide</a></p>
<p><a href="https://github.com/umijs/qiankun/examples" target="_blank" rel="noopener">https://github.com/umijs/qiankun/examples</a></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h3><p>管理微应用的入口服务</p>
<h3 id="微应用"><a href="#微应用" class="headerlink" title="微应用"></a>微应用</h3><p>微前端服务</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="主应用配置"><a href="#主应用配置" class="headerlink" title="主应用配置"></a>主应用配置</h3><h3 id="微应用配置"><a href="#微应用配置" class="headerlink" title="微应用配置"></a>微应用配置</h3><h3 id="在主应用中注册微应用"><a href="#在主应用中注册微应用" class="headerlink" title="在主应用中注册微应用"></a>在主应用中注册微应用</h3><blockquote>
<p>安装 qiankun</p>
</blockquote>
<p><code>yarn add qiankun</code></p>
<blockquote>
<p>在主应用中注册微应用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span></span><br><span class="line"></span><br><span class="line">registerMicroApps([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'react app'</span>, <span class="comment">// app name</span></span><br><span class="line">    entry: <span class="string">'//localhost:7100'</span>, <span class="comment">// app 入口 TODO 这个是需要微应用先启动吗？</span></span><br><span class="line">    container: <span class="string">'#yourContainer'</span>, <span class="comment">// 微应用加载的div</span></span><br><span class="line">    activeRule: <span class="string">'/yourActiverRule'</span> <span class="comment">// 路由匹配规则</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'react app'</span>, <span class="comment">// app name</span></span><br><span class="line">    entry: <span class="string">'//localhost:7110'</span>, <span class="comment">// app 入口 TODO 这个是需要微应用先启动吗？</span></span><br><span class="line">    container: <span class="string">'#yourContainer'</span>, <span class="comment">// 微应用加载的div</span></span><br><span class="line">    activeRule: <span class="string">'/yourActiverRule'</span> <span class="comment">// 路由匹配规则</span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">start()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果微应用不是直接与路由关联的，可以选择手动加载微应用的方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loadMicroApp &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span></span><br><span class="line"></span><br><span class="line">loadMicroApp(&#123;</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  entry: <span class="string">'//localhost:7700'</span>,</span><br><span class="line">  container: <span class="string">'$yourcaontainer'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>js继承</title>
    <url>/2021/07/16/fontend/awesome-js/js-extends-realize/</url>
    <content><![CDATA[<h1 id="js实现继承的几种方式"><a href="#js实现继承的几种方式" class="headerlink" title="js实现继承的几种方式"></a>js实现继承的几种方式</h1><ul>
<li><p><a href="https://www.cnblogs.com/humin/p/4556820.html" target="_blank" rel="noopener">JS继承的实现方式</a> - JS继承的实现方式</p>
</li>
<li><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1072866346339712" target="_blank" rel="noopener">class继承</a> - class继承</p>
</li>
</ul>
<h2 id="匿名函数与匿名自执行函数"><a href="#匿名函数与匿名自执行函数" class="headerlink" title="匿名函数与匿名自执行函数"></a>匿名函数与匿名自执行函数</h2><blockquote>
<p>匿名函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>匿名自执行函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  alert(data)</span><br><span class="line">&#125;)(<span class="string">'eee'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// alert()</span></span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web前端</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>es6新特性理解</title>
    <url>/2021/07/16/fontend/awesome-js/js-es6-function-realize/</url>
    <content><![CDATA[<h1 id="es6相关特性实现"><a href="#es6相关特性实现" class="headerlink" title="es6相关特性实现"></a>es6相关特性实现</h1><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h2 id="await-async"><a href="#await-async" class="headerlink" title="await/async"></a>await/async</h2><h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2>]]></content>
      <categories>
        <category>web前端</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js基础函数理解</title>
    <url>/2021/07/16/fontend/awesome-js/js-common-function-realize/</url>
    <content><![CDATA[<h1 id="js常见函数实现"><a href="#js常见函数实现" class="headerlink" title="js常见函数实现"></a>js常见函数实现</h1><h2 id="apply-amp-call-的作用"><a href="#apply-amp-call-的作用" class="headerlink" title="apply &amp; call 的作用"></a>apply &amp; call 的作用</h2><blockquote>
<p>改变 this 作用域</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个简单的加法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通调用其实涉及不到call appy</span></span><br><span class="line"><span class="comment">// 假如这个函数里面有this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b + <span class="keyword">this</span>.value)</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="keyword">this</span>.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时假如我们又一个对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  value: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是之前的函数调用 这个 this 是指向不到 obj.value </span></span><br><span class="line"><span class="comment">// 或者我们只能在 obj 里加一个函数 如下</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  value: <span class="number">10</span>,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + <span class="keyword">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但假如我们用 call apply 就可以了</span></span><br><span class="line"></span><br><span class="line">func.call(obj, <span class="number">1</span>, <span class="number">2</span>,)</span><br><span class="line">func.apply(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>具体实现可以看下面但 apply call 函数</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ctx = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newargs = [...arguments]</span><br><span class="line">    <span class="keyword">return</span> fn.apply(ctx, args.concat(newargs))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>[<span class="number">1</span>].length; i++) &#123;</span><br><span class="line">      args.push(<span class="string">'arguments[1]['</span> + i + <span class="string">']'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取this指向的对象</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;</span><br><span class="line">  <span class="comment">// 得到唯一标识</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  obj[fn] = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 执行这个函数</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="built_in">eval</span>(<span class="string">'obj[fn]('</span> + args + <span class="string">')'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'res'</span>, res)</span><br><span class="line">  <span class="keyword">delete</span> obj[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype._call = <span class="function"><span class="keyword">function</span> (<span class="params">ctx, a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ctx'</span>, ctx)</span><br><span class="line">  <span class="comment">// 1. 构造被调用对象，兼容默认值</span></span><br><span class="line">    <span class="keyword">var</span> obj = ctx || <span class="built_in">window</span> </span><br><span class="line">    <span class="comment">// 2. 获取后续参数 </span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).slice(<span class="number">1</span>) </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'args'</span>, args)</span><br><span class="line">    <span class="comment">// 3. 获取唯一属性名 </span></span><br><span class="line">    <span class="keyword">var</span> fun = <span class="built_in">Symbol</span>() </span><br><span class="line">    <span class="comment">// 4. 增加属性方法，指向待调用函数 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    obj[fun] = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> result = obj[fun](...args) </span><br><span class="line">    <span class="comment">// 5. 执行完毕后，删除该属性 </span></span><br><span class="line">    <span class="keyword">delete</span> obj[fun]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote>
<p>为什么要使用闭包呢？</p>
</blockquote>
<p>假如我们要实现个防抖函数，就是每次滚动就一直重置时间 确保函数只在特定时间间隔执行，基本实现如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// func 回调函数</span></span><br><span class="line"><span class="comment">// wait 时间间隔</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce1</span> (<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (time) &#123;</span><br><span class="line">    clearTimeout(time)</span><br><span class="line">  &#125;</span><br><span class="line">  time = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    func.call(<span class="keyword">this</span>, ...arguments)</span><br><span class="line">  &#125;, wait)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在问题 time 是局部变量 执行一次就相当于 time 变量多一个 一直滚动可能就出现几百个定时器</span></span><br><span class="line"><span class="comment">// 改变成全局变量就可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但假如我们不能用全局变量呢？这个时候就得使用闭包</span></span><br><span class="line"><span class="comment">// 将 time 放入 function () &#123;&#125; 中 然后将这个 function return 回去 不能是箭头函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (time) clearTimeout(time)</span><br><span class="line">    time = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      func.call(_this, ...args)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg1</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'main'</span>).addEventListener(<span class="string">'click'</span>, debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="number">250</span>)) <span class="comment">// 可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg2 这样不行 这样相当于初始化了两个 debounce 然后分别调用 这种情况类似于 vue 里面 data 返回的是一个函数 而不是一个object</span></span><br><span class="line">debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="number">250</span>)()</span><br><span class="line">debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="number">250</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg3 需要这样调用</span></span><br><span class="line"><span class="keyword">const</span> f =   debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.info(<span class="number">1</span>)&#125;, <span class="number">250</span>)</span><br><span class="line">f()</span><br><span class="line">f()</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment">//节流是规定函数在指定的时间间隔内只执行一次，一般用于scroll事件。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,time</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!canRun)&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;,time)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ul>
<li><a href="https://www.cnblogs.com/echolun/p/10903290.html" target="_blank" rel="noopener">js new一个对象的过程，实现一个简单的new方法</a> - js new一个对象的过程，实现一个简单的new方法</li>
</ul>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>1.以构造器的prototype属性为原型 创建新对象<br>2.将this和调用参数传给构造器 执行<br>3.如果构造器没有手动返回对象 则返回第一步创建的新对象 如果有则返回手动创建的对象</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自己定义的new方法</span></span><br><span class="line"><span class="keyword">let</span> newMethod = <span class="function"><span class="keyword">function</span> (<span class="params">Parent, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.以构造器的prototype属性为原型，创建新对象；</span></span><br><span class="line">  <span class="keyword">let</span> child = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">  <span class="comment">// 2.将this和调用参数传给构造器执行</span></span><br><span class="line">  <span class="keyword">let</span> result = Parent.apply(child, rest);</span><br><span class="line">  <span class="comment">// 3.如果构造器没有手动返回对象，则返回第一步的对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result  === <span class="string">'object'</span> ? result : child;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// superclass method</span></span><br><span class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x += x;</span><br><span class="line">  <span class="keyword">this</span>.y += y;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">'Shape moved.'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Rectangle - subclass</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">// call super constructor.</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// subclass extends superclass</span></span><br><span class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line">Rectangle.prototype.constructor = Rectangle; <span class="comment">//If you don't set Object.prototype.constructor to Rectangle,</span></span><br><span class="line"><span class="comment">//it will take prototype.constructor of Shape (parent).</span></span><br><span class="line"><span class="comment">//To avoid that, we set the prototype.constructor to Rectangle (child).</span></span><br></pre></td></tr></table></figure>

<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>与 <code>prototype.constructor</code> 强相关</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现一个instanceof操作符</span></span><br><span class="line"><span class="comment">// instanceof操作符是判断原型链来生效的，所以只要你将左边的_proto_和右边的prototype做对比</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstance</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当left是基础类型的时候直接返回false</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">'object'</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(left);</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span>(proto === right.prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      proto = <span class="built_in">Object</span>.getPrototypeOf(proto);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="deepclone"><a href="#deepclone" class="headerlink" title="deepclone"></a>deepclone</h2>]]></content>
      <categories>
        <category>web前端</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-js/awesome-nodejs/es6</title>
    <url>/2021/07/16/fontend/awesome-js/awesome-nodejs/es6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>nodejs Basic Intro</title>
    <url>/2021/07/16/fontend/awesome-js/awesome-nodejs/nodejs-intro/</url>
    <content><![CDATA[<h1 id="nodejs-event-eventEmitter"><a href="#nodejs-event-eventEmitter" class="headerlink" title="nodejs event eventEmitter"></a>nodejs event eventEmitter</h1>]]></content>
      <categories>
        <category>web前端</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>eventEmitter</tag>
        <tag>nodejs</tag>
        <tag>event</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-js/awesome-nodejs/readme</title>
    <url>/2021/07/16/fontend/awesome-js/awesome-nodejs/readme/</url>
    <content><![CDATA[<h1 id="awesome-nodejs"><a href="#awesome-nodejs" class="headerlink" title="awesome-nodejs"></a>awesome-nodejs</h1><h2 id="egg-js"><a href="#egg-js" class="headerlink" title="egg.js"></a>egg.js</h2><p>egg.js 与 koa.js 的差别（中间件的理解）</p>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-js/awesome-nodejs/node-gyp</title>
    <url>/2021/07/16/fontend/awesome-js/awesome-nodejs/node-gyp/</url>
    <content><![CDATA[<h1 id="node-gyp"><a href="#node-gyp" class="headerlink" title="node-gyp"></a>node-gyp</h1><h2 id="c-addon"><a href="#c-addon" class="headerlink" title="c++ addon"></a>c++ addon</h2><h2 id="node-gyp-npm-常见问题"><a href="#node-gyp-npm-常见问题" class="headerlink" title="node-gyp npm 常见问题"></a>node-gyp npm 常见问题</h2><p>安装失败node-gyp相关异常，删除C:\Users\xxx.node-gyp文件夹后（具体目录可搜索得出），然后（管理员权限）npm install –global –production windows-build-tools 再重试安装</p>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-electron/question-list</title>
    <url>/2021/07/16/fontend/awesome-electron/question-list/</url>
    <content><![CDATA[<h1 id="QUESTION-and-ANSWER"><a href="#QUESTION-and-ANSWER" class="headerlink" title="QUESTION and ANSWER"></a>QUESTION and ANSWER</h1><h2 id="electron7-0-0-安装报错"><a href="#electron7-0-0-安装报错" class="headerlink" title="electron7.0.0+ 安装报错"></a>electron7.0.0+ 安装报错</h2><p>进入到 <code>node_modules/electron</code> 目录 运行 <code>node index.js</code> 进行依赖下载</p>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-electron/readme</title>
    <url>/2021/07/16/fontend/awesome-electron/readme/</url>
    <content><![CDATA[<ul>
<li><a href="question-list.md">QUESTION &amp;&amp; ANSWER</a> - electron 常见问题及解决方案</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Electron Basic Intro</title>
    <url>/2021/07/16/fontend/awesome-electron/electron-introduce/</url>
    <content><![CDATA[<h1 id="electron-文章目录"><a href="#electron-文章目录" class="headerlink" title="electron 文章目录"></a>electron 文章目录</h1><h2 id="nodejs事件循环"><a href="#nodejs事件循环" class="headerlink" title="nodejs事件循环"></a>nodejs事件循环</h2><h2 id="chrome事件循环"><a href="#chrome事件循环" class="headerlink" title="chrome事件循环"></a>chrome事件循环</h2><h2 id="探索electron和nw-js内部"><a href="#探索electron和nw-js内部" class="headerlink" title="探索electron和nw.js内部"></a>探索electron和nw.js内部</h2>]]></content>
      <categories>
        <category>web前端</category>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>fontend/awesome-dragonbones/question-list</title>
    <url>/2021/07/16/fontend/awesome-dragonbones/question-list/</url>
    <content><![CDATA[<h1 id="question-list"><a href="#question-list" class="headerlink" title="question-list"></a>question-list</h1><h2 id="场景树的资源层级怎么调整"><a href="#场景树的资源层级怎么调整" class="headerlink" title="场景树的资源层级怎么调整"></a>场景树的资源层级怎么调整</h2><p>在左上角 【窗口】 -&gt; 【层级】 勾选后 就可以有层级面板</p>
<h2 id="已经建好的骨骼怎么移动位置呢"><a href="#已经建好的骨骼怎么移动位置呢" class="headerlink" title="已经建好的骨骼怎么移动位置呢"></a>已经建好的骨骼怎么移动位置呢</h2><p>可以移动图片 然后在移动骨骼</p>
<h2 id="如何只删除骨骼而不删除骨骼绑定的图片呢"><a href="#如何只删除骨骼而不删除骨骼绑定的图片呢" class="headerlink" title="如何只删除骨骼而不删除骨骼绑定的图片呢"></a>如何只删除骨骼而不删除骨骼绑定的图片呢</h2><p>图片 右键 【选择父级】 更改图片的父骨骼</p>
<h2 id="怎么控制图片的一端不动一端动呢"><a href="#怎么控制图片的一端不动一端动呢" class="headerlink" title="怎么控制图片的一端不动一端动呢"></a>怎么控制图片的一端不动一端动呢</h2><p>把图片在细化 也就是龙骨是以骨骼为核心 分解成更小的图片才可以</p>
<h2 id="怎样更好的对图片进行缩放移动旋转"><a href="#怎样更好的对图片进行缩放移动旋转" class="headerlink" title="怎样更好的对图片进行缩放移动旋转"></a>怎样更好的对图片进行缩放移动旋转</h2><p>中间下方操作栏 </p>
<p><img src="./img/operator.png" alt="操作栏"></p>
<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2>]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-dragonbones/readme</title>
    <url>/2021/07/16/fontend/awesome-dragonbones/readme/</url>
    <content><![CDATA[<h1 id="龙骨动画学习"><a href="#龙骨动画学习" class="headerlink" title="龙骨动画学习"></a>龙骨动画学习</h1><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul>
<li><p><a href="">todo-list.md</a> - todolist</p>
</li>
<li><p><a href="">question-list.md</a> - question list</p>
</li>
<li><p><a href="">basic-concept.md</a> - 基本概念</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-dragonbones/basic-concept</title>
    <url>/2021/07/16/fontend/awesome-dragonbones/basic-concept/</url>
    <content><![CDATA[<h1 id="龙骨基本概念"><a href="#龙骨基本概念" class="headerlink" title="龙骨基本概念"></a>龙骨基本概念</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><img src="./img/concepts.png" alt="概念"></p>
<blockquote>
<p>骨骼动画</p>
</blockquote>
<p>仿照骨骼结构 建立一个节点树 每一个节点算是骨骼的关节，在这些关节上建立关键帧，通过一些计算来生成中间帧。所谓FK和IK，都是计算中间帧节点位置的方法。3D骨骼需要两个步骤，一是rigging（绑骨）就是建立一个骨骼框架，二是skinning（贴图）就是把3D模型对应到骨骼框架上。</p>
<blockquote>
<p>补间动画</p>
</blockquote>
<p>将两个关键帧连接起来，储存关键帧</p>
<blockquote>
<p>逐帧动画</p>
</blockquote>
<p>动画的每一帧都储存在内存里，顺序播放这些帧</p>
<blockquote>
<p>骨骼约束</p>
</blockquote>
<p>通过IK和FK算法来生成骨骼发中间关键帧 给某几条骨骼组合绑定约束</p>
<p>IK(forward kinematics 正向运动)</p>
<p>FK(inverse kinematics 反向运动)</p>
<h2 id="龙骨操作面板"><a href="#龙骨操作面板" class="headerlink" title="龙骨操作面板"></a>龙骨操作面板</h2><blockquote>
<p>主面板</p>
</blockquote>
<p><img src="./img/main.png" alt="主面板和操作边界icon"></p>
<blockquote>
<p>属性操作面板</p>
</blockquote>
<p><img src="./img/attribute.png" alt="属性操作面板"></p>
<blockquote>
<p>场景树</p>
</blockquote>
<p><img src="./img/scene.png" alt="场景树"></p>
<blockquote>
<p>资源列表</p>
</blockquote>
<p><img src="./img/source.png" alt="资源列表"></p>
<blockquote>
<p>动画编辑</p>
</blockquote>
<p><img src="./img/animation.png" alt="动画编辑"></p>
<h2 id="动画面板"><a href="#动画面板" class="headerlink" title="动画面板"></a>动画面板</h2><blockquote>
<p>如何在某一帧将图片设置为隐藏？</p>
</blockquote>
<p>图片的【属性】面板中有个不透明度选项</p>
<h2 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h2><blockquote>
<p>骨骼创建</p>
</blockquote>
<ol>
<li><p>在 主面板 右上角有个创建骨骼的icon 点击即可创建</p>
</li>
<li><p>龙骨实现了自动绑定的功能 即骨骼创建时划过哪个图片就将骨骼绑定到哪个图片</p>
</li>
<li><p>可以将游离的骨骼通过 CTROL 键选中后 进行与图片绑定</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-canvas/readme</title>
    <url>/2021/07/16/fontend/awesome-canvas/readme/</url>
    <content><![CDATA[<h1 id="基于canvas的笔记库"><a href="#基于canvas的笔记库" class="headerlink" title="基于canvas的笔记库"></a>基于canvas的笔记库</h1><blockquote>
<p>实现 笔，橡皮，圈选，旋转移动缩放，撤销恢复，插件功能等核心功能</p>
</blockquote>
<h2 id="笔记功能"><a href="#笔记功能" class="headerlink" title="笔记功能"></a>笔记功能</h2><h2 id="橡皮"><a href="#橡皮" class="headerlink" title="橡皮"></a>橡皮</h2><h2 id="圈选"><a href="#圈选" class="headerlink" title="圈选"></a>圈选</h2><h2 id="控制器（旋转移动缩放）自定义控制器"><a href="#控制器（旋转移动缩放）自定义控制器" class="headerlink" title="控制器（旋转移动缩放）自定义控制器"></a>控制器（旋转移动缩放）自定义控制器</h2><h2 id="撤销恢复"><a href="#撤销恢复" class="headerlink" title="撤销恢复"></a>撤销恢复</h2><h2 id="插件功能管理"><a href="#插件功能管理" class="headerlink" title="插件功能管理"></a>插件功能管理</h2><h2 id="编写简单插件"><a href="#编写简单插件" class="headerlink" title="编写简单插件"></a>编写简单插件</h2>]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-css/flex</title>
    <url>/2021/07/16/fontend/awesome-css/flex/</url>
    <content><![CDATA[<h1 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h1><h2 id="QA-LIST"><a href="#QA-LIST" class="headerlink" title="QA LIST"></a>QA LIST</h2><h3 id="flex-1-含义"><a href="#flex-1-含义" class="headerlink" title="flex: 1 含义"></a>flex: 1 含义</h3><p><code>flex</code> 是 <code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code> 的缩写</p>
<p><code>flex-grow</code> 属性定义了项目的放大比例 默认为0 即如果存在剩余空间 也不放大</p>
<p><code>flex-shrink</code> 属性定义了项目的缩小比例 默认为1 即如果空间不足 项目自动缩小</p>
<p><code>flex-basis</code> 属性定义了在分配多余空间之前 项目占据的主轴空间 浏览器根据这个属性 计算主轴是否有多余的空间。他的默认值为 auto 即项目的本来大小</p>
<p>故其取值可以考虑以下情况：</p>
<p><code>flex</code> 的默认值是以上三个属性的组合，假设以上三个属性取默认值 则 <code>flex</code> 的默认值 <code>0 1 auto</code> </p>
<p><code>flex</code> 如果有设置则 覆盖默认值 如下两个是等价的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.item &#123; <span class="attr">flex</span>: <span class="number">2333</span> <span class="number">22</span> <span class="number">22</span>px; &#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  flex-grow: <span class="number">2333</span>;</span><br><span class="line">  flex-shrink: <span class="number">3222</span>;</span><br><span class="line">  flex-basis: <span class="number">234</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值是 <code>none</code> 则计算值是 <code>0 0  auto</code></p>
<p>当 <code>flex</code> 取值是 <code>auto</code> 则计算值是 <code>1 1 auto</code></p>
<p>当 <code>flex</code> 取值是一个非负值 则该数字是 <code>flex-grow</code>值 等价如下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;flex: 1;&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  flex-shrink: 1;</span><br><span class="line">  flex-basis: 0%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 是一个长度或者百分比，则视为 <code>flex-basis</code> 值 等价如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item-1 &#123;flex: 0%;&#125;</span><br><span class="line">.item-1 &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  flex-shrink: 1;</span><br><span class="line">  flex-basis: 0%;</span><br><span class="line">&#125;</span><br><span class="line">.item-2 &#123;flex: 24px;&#125;</span><br><span class="line">.item-1 &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  flex-shrink: 1;</span><br><span class="line">  flex-basis: 24px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值为两个非负值时 等同如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;flex: 2 3;&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  flex-grow: 2;</span><br><span class="line">  flex-shrink: 3;</span><br><span class="line">  flex-basis: 0%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值是一个非负数字和一个长度或者百分比 等同如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;flex: 2333 3222px;&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">    flex-grow: 2333;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    flex-basis: 3222px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考</p>
</blockquote>
<ul>
<li><a href="https://www.cnblogs.com/wenqiangit/p/11664524.html" target="_blank" rel="noopener">flex:1和flex:auto详解</a> - flex:1和flex:auto详解</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-css/question-list</title>
    <url>/2021/07/16/fontend/awesome-css/question-list/</url>
    <content><![CDATA[<h2 id="flex-与-grid-布局差别？"><a href="#flex-与-grid-布局差别？" class="headerlink" title="flex 与 grid 布局差别？"></a>flex 与 grid 布局差别？</h2><h2 id="flex-水平居中-垂直居中？"><a href="#flex-水平居中-垂直居中？" class="headerlink" title="flex 水平居中 垂直居中？"></a>flex 水平居中 垂直居中？</h2>]]></content>
  </entry>
  <entry>
    <title>fontend/awesome-css/readme</title>
    <url>/2021/07/16/fontend/awesome-css/readme/</url>
    <content><![CDATA[<h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><ul>
<li><a href="">question-list.md</a> - 问题列表</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>笔记撤销恢复</title>
    <url>/2021/07/16/fontend/awesome-canvas/canvas-recovery/</url>
    <content><![CDATA[<h1 id="笔记撤销恢复"><a href="#笔记撤销恢复" class="headerlink" title="笔记撤销恢复"></a>笔记撤销恢复</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.eles &#x3D; [] &#x2F;&#x2F; 当前页画布元素集合</span><br><span class="line">this.historyDatas &#x3D; &#123;&#125; &#x2F;&#x2F; 整个课件数据存储 this.historyDatas[this.pageId] &#x3D; this.eles</span><br><span class="line">this.historyIndex &#x3D; -1 &#x2F;&#x2F; 当前页撤销回退坐标</span><br></pre></td></tr></table></figure>

<h2 id="画布的渲染"><a href="#画布的渲染" class="headerlink" title="画布的渲染"></a>画布的渲染</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">renderByData () &#123;</span><br><span class="line">  this.clear()</span><br><span class="line">  if (this.historyIndex &gt;&#x3D; 0) &#123;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; this.historyIndex + 1; i++) &#123;</span><br><span class="line">      let ele &#x3D; this.eles[i]</span><br><span class="line">      if (!ele || !ele.isFinish()) continue</span><br><span class="line">      if (ele.type &#x3D;&#x3D;&#x3D; &#39;clearCanvas&#39;) &#123;</span><br><span class="line">        let config &#x3D; ele.getConfig()</span><br><span class="line">        config.width &#x3D; this.canv.width &#x2F; this.scale</span><br><span class="line">        config.height &#x3D; this.canv.height &#x2F; this.scale</span><br><span class="line">        ele.setConfig(config)</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 渲染每一笔画笔</span><br><span class="line">      ele.render(this.ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web前端</category>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>画笔</title>
    <url>/2021/07/16/fontend/awesome-canvas/canvas-pen/</url>
    <content><![CDATA[<h1 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h1><hr>
<h2 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h2><p>实现画笔功能，最基础就是得到鼠标（或者触摸）的点，所以，我们得先添加事件监听来获取点的数组。</p>
<p>对于鼠标来说，我们常常使用mouse相关事件，对于可触摸屏来说，我们常常使用touch事件，其实，可以使用point事件它对于鼠标和触摸屏都可以兼容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.canv.addEventListener(&#39;pointerdown&#39;, this.drawBegin.bind(this))</span><br><span class="line">this.canv.addEventListener(&#39;pointermove&#39;, this.drawing.bind(this), &#123; passive: true &#125;)</span><br><span class="line">this.canv.addEventListener(&#39;pointerup&#39;, this.drawEnd.bind(this))</span><br></pre></td></tr></table></figure>

<h2 id="绘制简单路径"><a href="#绘制简单路径" class="headerlink" title="绘制简单路径"></a>绘制简单路径</h2><h4 id="获取点和过滤点"><a href="#获取点和过滤点" class="headerlink" title="获取点和过滤点"></a>获取点和过滤点</h4><p>对于点的处理，我们单独对点封装成一个类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default class Point &#123;</span><br><span class="line">  constructor (x, y) &#123;</span><br><span class="line">    this.x &#x3D; x &#x2F;&#x2F; x坐标</span><br><span class="line">    this.y &#x3D; y &#x2F;&#x2F; y坐标</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="直线绘制和曲线绘制"><a href="#直线绘制和曲线绘制" class="headerlink" title="直线绘制和曲线绘制"></a>直线绘制和曲线绘制</h4><p>有了封装的点的类，接下来，我们来对画笔的基础处理进行一个封装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ElementBase &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.pointList &#x3D; [] &#x2F;&#x2F; 绘制的点的数组</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，我们来封装一个获取点的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_getPoint (event) &#123;</span><br><span class="line">  return new Point(event.layerX, event.layerY)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">  * 添加过滤之后的采样点</span><br><span class="line">  * @param &#123;Point&#125; point 点</span><br><span class="line">  * @returns &#123;number&#125; 如果成功添加采样点，返回过滤后采样点数组长度，否则返回-1</span><br><span class="line">  *&#x2F;</span><br><span class="line">_addPoint (point) &#123;</span><br><span class="line">  if (this._pointFilter(point)) &#123;</span><br><span class="line">    this.pointList.push(point)</span><br><span class="line">    return this.pointList.length</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return -1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们应该还需要一个点过滤器，防止画笔不动时，同样的点不断被添加到该数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 点过滤器</span><br><span class="line">  * @param &#123;Point&#125; point 点</span><br><span class="line">  * @returns &#123;Boolean&#125; 返回是否被过滤，true表示不过滤，false表示被过滤</span><br><span class="line">  *&#x2F;</span><br><span class="line">_pointFilter (point) &#123;</span><br><span class="line">  if (this.pointList.length &#x3D;&#x3D;&#x3D; 0) return true</span><br><span class="line">  const lastPoint &#x3D; this.pointList[this.pointList.length - 1]</span><br><span class="line">  if (point.x &#x3D;&#x3D;&#x3D; lastPoint.x &amp;&amp; point.y &#x3D;&#x3D;&#x3D; lastPoint.y) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这些点，我们封装一些常见的绘制方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一个点</span><br><span class="line">  * @param &#123;Point&#125; point 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderPoint (ctx, &#123; color, width &#125;) &#123;</span><br><span class="line">  ctx.fillStyle &#x3D; color</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.arc(this.pointList[0].x, this.pointList[0].y, width &#x2F; 2, 0, 2 * Math.PI, true)</span><br><span class="line">  ctx.fill()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一个路径</span><br><span class="line">  * @param pointList 点的集合</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderPath (ctx, &#123; color, width &#125;) &#123;</span><br><span class="line">  ctx.strokeStyle &#x3D; color</span><br><span class="line">  ctx.lineWidth &#x3D; width</span><br><span class="line">  ctx.lineCap &#x3D; &#39;round&#39;</span><br><span class="line">  ctx.lineJoin &#x3D; &#39;round&#39;</span><br><span class="line">  let endIndex &#x3D; this.pointList.length - 1</span><br><span class="line">  for (let i &#x3D; this.from; i &lt; endIndex; i++) &#123;</span><br><span class="line">    if (i &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      const middlePoint &#x3D; this._getMiddlePoint(this.pointList[i], this.pointList[i + 1])</span><br><span class="line">      this._renderLineTo(ctx, this.pointList[i], middlePoint)</span><br><span class="line">    &#125; else if (i &#x3D;&#x3D;&#x3D; endIndex) &#123;</span><br><span class="line">      if (this.finish) &#123;</span><br><span class="line">        const middlePoint &#x3D; this._getMiddlePoint(</span><br><span class="line">          this.pointList[i - 1],</span><br><span class="line">          this.pointList[i]</span><br><span class="line">        )</span><br><span class="line">        this._renderLineTo(ctx, this.pointList[i], middlePoint)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this._renderQuadraticCurve(</span><br><span class="line">        ctx,</span><br><span class="line">        this.pointList[i - 1],</span><br><span class="line">        this.pointList[i],</span><br><span class="line">        this.pointList[i + 1]</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一条直线</span><br><span class="line">  * @param &#123;Point&#125; p1 点</span><br><span class="line">  * @param &#123;Point&#125; p2 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderLineTo (ctx, p1, p2) &#123;</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.moveTo(p1.x, p1.y)</span><br><span class="line">  ctx.lineTo(p2.x, p2.y)</span><br><span class="line">  ctx.stroke()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">  * 获取中点</span><br><span class="line">  * @param &#123;Point&#125; p1 点</span><br><span class="line">  * @param &#123;Point&#125; p2 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_getMiddlePoint (p1, p2) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    x: Math.floor((p1.x + p2.x) &#x2F; 2),</span><br><span class="line">    y: Math.floor((p1.y + p2.y) &#x2F; 2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一条二次贝塞尔曲线，根据连续三个点，绘制中间的贝塞尔曲线</span><br><span class="line">  * @param &#123;Point&#125; p1 点</span><br><span class="line">  * @param &#123;Point&#125; p2 点</span><br><span class="line">  * @param &#123;Point&#125; p3 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderQuadraticCurve (ctx, p1, p2, p3) &#123;</span><br><span class="line">  let preMiddelPoint &#x3D; this._getMiddlePoint(p1, p2)</span><br><span class="line"></span><br><span class="line">  let lastMiddelPoint &#x3D; this._getMiddlePoint(p2, p3)</span><br><span class="line"></span><br><span class="line">  let controlPoint &#x3D; p2</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.moveTo(preMiddelPoint.x, preMiddelPoint.y)</span><br><span class="line">  ctx.quadraticCurveTo(</span><br><span class="line">    controlPoint.x,</span><br><span class="line">    controlPoint.y,</span><br><span class="line">    lastMiddelPoint.x,</span><br><span class="line">    lastMiddelPoint.y</span><br><span class="line">  )</span><br><span class="line">  ctx.stroke()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="笔记优化"><a href="#笔记优化" class="headerlink" title="笔记优化"></a>笔记优化</h4>]]></content>
      <categories>
        <category>web前端</category>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>几何图形</title>
    <url>/2021/07/16/fontend/awesome-canvas/canvas-shape/</url>
    <content><![CDATA[<h1 id="几何图形"><a href="#几何图形" class="headerlink" title="几何图形"></a>几何图形</h1><h2 id="几何图形绘制"><a href="#几何图形绘制" class="headerlink" title="几何图形绘制"></a>几何图形绘制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class OriginShape &#123;</span><br><span class="line">  constructor (ctxTemp &#x3D; null) &#123;</span><br><span class="line">    this.ctxTemp &#x3D; ctxTemp</span><br><span class="line">    this.opts &#x3D; &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getCenterPoint () &#123;</span><br><span class="line">    let x &#x3D; (this.opts.end.x + this.opts.start.x) &#x2F; 2</span><br><span class="line">    let y &#x3D; (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">    return &#123; x, y &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 公共函数，画圆、椭圆、半圆、虚线圆、实线圆</span><br><span class="line">  _circle (center, a, b, semiCircle) &#123;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    let r &#x3D; a &gt; b ? a : b</span><br><span class="line">    let ratioX &#x3D; a &#x2F; r</span><br><span class="line">    let ratioY &#x3D; b &#x2F; r</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.scale(ratioX, ratioY)</span><br><span class="line">    if (semiCircle &#x3D;&#x3D;&#x3D; &#39;up&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 上半圆 虚线</span><br><span class="line">      this.ctxTemp.save()</span><br><span class="line">      this.ctxTemp.setLineDash([10, 15])</span><br><span class="line">      this.ctxTemp.arc(</span><br><span class="line">        center.x &#x2F; ratioX,</span><br><span class="line">        center.y &#x2F; ratioY,</span><br><span class="line">        r,</span><br><span class="line">        0,</span><br><span class="line">        Math.PI,</span><br><span class="line">        true</span><br><span class="line">      )</span><br><span class="line">      this.ctxTemp.stroke()</span><br><span class="line">      this.ctxTemp.restore()</span><br><span class="line">    &#125; else if (semiCircle &#x3D;&#x3D;&#x3D; &#39;down&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 下半圆 实线</span><br><span class="line">      this.ctxTemp.beginPath()</span><br><span class="line">      this.ctxTemp.arc(</span><br><span class="line">        center.x &#x2F; ratioX,</span><br><span class="line">        center.y &#x2F; ratioY,</span><br><span class="line">        r,</span><br><span class="line">        0,</span><br><span class="line">        Math.PI,</span><br><span class="line">        false</span><br><span class="line">      )</span><br><span class="line">      this.ctxTemp.stroke()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 整圆</span><br><span class="line">      this.ctxTemp.beginPath()</span><br><span class="line">      this.ctxTemp.arc(</span><br><span class="line">        center.x &#x2F; ratioX,</span><br><span class="line">        center.y &#x2F; ratioY,</span><br><span class="line">        r,</span><br><span class="line">        0,</span><br><span class="line">        2 * Math.PI,</span><br><span class="line">        false</span><br><span class="line">      )</span><br><span class="line">      this.ctxTemp.stroke()</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">  &#125;</span><br><span class="line">  _axis (direction) &#123;</span><br><span class="line">    let lineWidth &#x3D; this.ctxTemp.lineWidth</span><br><span class="line">    let p1 &#x3D; &#123;&#125;</span><br><span class="line">    let p2 &#x3D; &#123;&#125;</span><br><span class="line">    let p3 &#x3D; &#123;&#125;</span><br><span class="line">    let p4 &#x3D; &#123;&#125;</span><br><span class="line">    let p5 &#x3D; &#123;&#125;</span><br><span class="line">    if (direction &#x3D;&#x3D;&#x3D; &#39;x&#39;) &#123;</span><br><span class="line">      p1 &#x3D; &#123;</span><br><span class="line">        x: this.opts.start.x,</span><br><span class="line">        y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.opts.end.x &lt; this.opts.start.x) &#123;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: this.opts.end.x + 15,</span><br><span class="line">          y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">        &#125;</span><br><span class="line">        p5 &#x3D; &#123;</span><br><span class="line">          x: p2.x - 15,</span><br><span class="line">          y: p2.y</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: this.opts.end.x - 15,</span><br><span class="line">          y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">        &#125;</span><br><span class="line">        p5 &#x3D; &#123;</span><br><span class="line">          x: p2.x + 15,</span><br><span class="line">          y: p2.y</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      p3 &#x3D; &#123;</span><br><span class="line">        x: p2.x,</span><br><span class="line">        y: p2.y - 10 - lineWidth &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">      p4 &#x3D; &#123;</span><br><span class="line">        x: p2.x,</span><br><span class="line">        y: p2.y + 10 + lineWidth &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (direction &#x3D;&#x3D;&#x3D; &#39;y&#39;) &#123;</span><br><span class="line">      if (this.opts.end.y &lt; this.opts.start.y) &#123;</span><br><span class="line">        p1 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.start.y</span><br><span class="line">        &#125;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.end.y + 15</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        p1 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.end.y</span><br><span class="line">        &#125;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.start.y + 15</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      p3 &#x3D; &#123;</span><br><span class="line">        x: p2.x - 10 - lineWidth &#x2F; 2,</span><br><span class="line">        y: p2.y</span><br><span class="line">      &#125;</span><br><span class="line">      p4 &#x3D; &#123;</span><br><span class="line">        x: p2.x + 10 + lineWidth &#x2F; 2,</span><br><span class="line">        y: p2.y</span><br><span class="line">      &#125;</span><br><span class="line">      p5 &#x3D; &#123;</span><br><span class="line">        x: p2.x,</span><br><span class="line">        y: p2.y - 15</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.lineTo(p5.x, p5.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.fill()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 矩形</span><br><span class="line">  rectangle () &#123;</span><br><span class="line">    this.ctxTemp.rect(</span><br><span class="line">      this.opts.start.x,</span><br><span class="line">      this.opts.start.y,</span><br><span class="line">      this.opts.end.x - this.opts.start.x,</span><br><span class="line">      this.opts.end.y - this.opts.start.y</span><br><span class="line">    )</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 三角形</span><br><span class="line">  triangle () &#123;</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; this.opts.end</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 直角三角形</span><br><span class="line">  rightTriangle () &#123;</span><br><span class="line">    let p1 &#x3D; this.opts.start</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; this.opts.end</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 直线</span><br><span class="line">  line () &#123;</span><br><span class="line">    this.ctxTemp.moveTo(this.opts.start.x, this.opts.start.y)</span><br><span class="line">    this.ctxTemp.lineTo(this.opts.end.x, this.opts.end.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 虚线</span><br><span class="line">  dashed () &#123;</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.setLineDash([10, 15])</span><br><span class="line">    this.ctxTemp.moveTo(this.opts.start.x, this.opts.start.y)</span><br><span class="line">    this.ctxTemp.lineTo(this.opts.end.x, this.opts.end.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圆</span><br><span class="line">  circle () &#123;</span><br><span class="line">    let center &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">    &#125;</span><br><span class="line">    let a &#x3D; Math.abs((this.opts.end.x - this.opts.start.x) &#x2F; 2)</span><br><span class="line">    let b &#x3D; Math.abs((this.opts.end.y - this.opts.start.y) &#x2F; 2)</span><br><span class="line">    this._circle(center, a, b)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 平行四边形</span><br><span class="line">  parallelogram () &#123;</span><br><span class="line">    let w &#x3D; this.opts.end.x - this.opts.start.x</span><br><span class="line">    let offset &#x3D; w &#x2F; 4</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x + offset,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x - offset,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p4 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 坐标系</span><br><span class="line">  coordinate () &#123;</span><br><span class="line">    this._axis(&#39;x&#39;)</span><br><span class="line">    this._axis(&#39;y&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 数轴</span><br><span class="line">  axis () &#123;</span><br><span class="line">    this._axis(&#39;x&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 立方体</span><br><span class="line">  cube () &#123;</span><br><span class="line">    let w &#x3D; this.opts.end.x - this.opts.start.x</span><br><span class="line">    let h &#x3D; this.opts.end.y - this.opts.start.y</span><br><span class="line">    let offsetX &#x3D; w &#x2F; 4</span><br><span class="line">    let offsetY &#x3D; h &#x2F; 4</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 顶部面的4点</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x + offsetX,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x - offsetX,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p4 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 正面 下面的2点</span><br><span class="line">    let p5 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p6 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x - offsetX,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 背后的2点</span><br><span class="line">    let p7 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x + offsetX,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p8 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 画上面和正面</span><br><span class="line">    this.ctxTemp.moveTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.lineTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.lineTo(p5.x, p5.y)</span><br><span class="line">    this.ctxTemp.lineTo(p6.x, p6.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    &#x2F;&#x2F; 画右面</span><br><span class="line">    this.ctxTemp.moveTo(p6.x, p6.y)</span><br><span class="line">    this.ctxTemp.lineTo(p8.x, p8.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    &#x2F;&#x2F; 背面的虚线</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.setLineDash([10, 15])</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p7.x, p7.y)</span><br><span class="line">    this.ctxTemp.lineTo(p5.x, p5.y)</span><br><span class="line">    this.ctxTemp.moveTo(p7.x, p7.y)</span><br><span class="line">    this.ctxTemp.lineTo(p8.x, p8.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圆柱体</span><br><span class="line">  cylinder () &#123;</span><br><span class="line">    let h &#x3D; this.opts.end.y - this.opts.start.y</span><br><span class="line">    let offsetY &#x3D; h &#x2F; 8</span><br><span class="line">    let centerA &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let a &#x3D; Math.abs((this.opts.end.x - this.opts.start.x) &#x2F; 2)</span><br><span class="line">    let b &#x3D; offsetY</span><br><span class="line">    this._circle(centerA, a, b) &#x2F;&#x2F; 上圆</span><br><span class="line"></span><br><span class="line">    let centerB &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this._circle(centerB, a, b, &#39;up&#39;) &#x2F;&#x2F; 下虚半圆</span><br><span class="line">    this._circle(centerB, a, b, &#39;down&#39;) &#x2F;&#x2F; 下半实圆</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p4 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.moveTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圆锥体</span><br><span class="line">  cone () &#123;</span><br><span class="line">    let h &#x3D; this.opts.end.y - this.opts.start.y</span><br><span class="line">    let offsetY &#x3D; h &#x2F; 8</span><br><span class="line">    let a &#x3D; Math.abs((this.opts.end.x - this.opts.start.x) &#x2F; 2)</span><br><span class="line">    let b &#x3D; offsetY</span><br><span class="line">    let center &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this._circle(center, a, b, &#39;up&#39;) &#x2F;&#x2F; 下虚半圆</span><br><span class="line">    this._circle(center, a, b, &#39;down&#39;) &#x2F;&#x2F; 下半实圆</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: (this.opts.start.x + this.opts.end.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  drawShape (opts, ctx) &#123;</span><br><span class="line">    if (opts) &#123;</span><br><span class="line">      this.opts &#x3D; opts</span><br><span class="line">    &#125;</span><br><span class="line">    if (ctx) &#123;</span><br><span class="line">      this.ctxTemp &#x3D; ctx</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      throw new Error(&#39;Parameter ctx is empty&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.lineCap &#x3D; &#39;round&#39;</span><br><span class="line">    this.ctxTemp.lineJoin &#x3D; &#39;round&#39;</span><br><span class="line">    this.ctxTemp.strokeStyle &#x3D; opts.color</span><br><span class="line">    this.ctxTemp.fillStyle &#x3D; opts.color</span><br><span class="line">    this.ctxTemp.lineWidth &#x3D; opts.width</span><br><span class="line">    if (this.opts.angle) &#123;</span><br><span class="line">      let origin &#x3D; this.getCenterPoint()</span><br><span class="line">      this.ctxTemp.translate(origin.x, origin.y)</span><br><span class="line">      this.ctxTemp.rotate(this.opts.angle)</span><br><span class="line">      this.ctxTemp.translate(-origin.x, -origin.y)</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    switch (this.opts.type) &#123;</span><br><span class="line">      case &#39;rectangle&#39;: &#x2F;&#x2F; 矩形</span><br><span class="line">        this.rectangle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;triangle&#39;: &#x2F;&#x2F; 等腰三角形</span><br><span class="line">        this.triangle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;rightTriangle&#39;: &#x2F;&#x2F; 直角三角形</span><br><span class="line">        this.rightTriangle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;line&#39;: &#x2F;&#x2F; 直线</span><br><span class="line">        this.line()</span><br><span class="line">        break</span><br><span class="line">      case &#39;dashed&#39;: &#x2F;&#x2F; 虚线</span><br><span class="line">        this.dashed()</span><br><span class="line">        break</span><br><span class="line">      case &#39;circle&#39;: &#x2F;&#x2F; 圆</span><br><span class="line">        this.circle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;parallelogram&#39;: &#x2F;&#x2F; 平行四边形</span><br><span class="line">        this.parallelogram()</span><br><span class="line">        break</span><br><span class="line">      case &#39;coordinate&#39;: &#x2F;&#x2F; 坐标系</span><br><span class="line">        this.coordinate()</span><br><span class="line">        break</span><br><span class="line">      case &#39;axis&#39;: &#x2F;&#x2F; 数轴</span><br><span class="line">        this.axis()</span><br><span class="line">        break</span><br><span class="line">      case &#39;cube&#39;: &#x2F;&#x2F; 立方体</span><br><span class="line">        this.cube()</span><br><span class="line">        break</span><br><span class="line">      case &#39;cylinder&#39;: &#x2F;&#x2F; 圆柱体</span><br><span class="line">        this.cylinder()</span><br><span class="line">        break</span><br><span class="line">      case &#39;cone&#39;: &#x2F;&#x2F; 圆锥体</span><br><span class="line">        this.cone()</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default OriginShape</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web前端</category>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记点选和圈选</title>
    <url>/2021/07/16/fontend/awesome-canvas/canvas-choose/</url>
    <content><![CDATA[<h1 id="笔记点选和圈选"><a href="#笔记点选和圈选" class="headerlink" title="笔记点选和圈选"></a>笔记点选和圈选</h1><hr>
<h2 id="笔记的数据化和笔记选择含义"><a href="#笔记的数据化和笔记选择含义" class="headerlink" title="笔记的数据化和笔记选择含义"></a>笔记的数据化和笔记选择含义</h2><blockquote>
<p>对于每一条笔记，在数据层面，只要储存笔记的点的数组（点是有序的）且知道每个点的连接方式（直线，贝赛尔曲线连接等）就可以还原出该条笔记。</p>
</blockquote>
<p>所以，对于笔记的选择，只要判断所选区域里是否含有点数组中的某一点，即可判定在所选区域内。</p>
<h2 id="笔记圈选"><a href="#笔记圈选" class="headerlink" title="笔记圈选"></a>笔记圈选</h2><h4 id="所选区域"><a href="#所选区域" class="headerlink" title="所选区域"></a>所选区域</h4><p>笔记圈选的所选区域其实是该条曲线绘制后，首尾点连接后canvas判定的区域。</p>
<h4 id="笔记圈选区域的简单判断"><a href="#笔记圈选区域的简单判断" class="headerlink" title="笔记圈选区域的简单判断"></a>笔记圈选区域的简单判断</h4><p>我们知道，每一条笔记里储存的点的量都是很大的，有些甚至能到上万点，而我们需要对每一条笔记都进行判断，所以，非常耗性能，那我们是否能进行一些简单的预判断，来处理一些笔记容易判断的情况呢？</p>
<p>我们知道，每一天笔记都可以用一个矩形包围起来，矩形的可以通过遍历这些点获取，矩形的左上点为((left)min, (top)min)即所有点的left，top值最小值时的点，矩形的右下角点为((right)max, bottom(max))</p>
<p>所以，假设两个笔记的外矩形不想交，则证明两条笔记肯定不相交。</p>
<h4 id="使用ctx-isPointInPath-x-y-来判断"><a href="#使用ctx-isPointInPath-x-y-来判断" class="headerlink" title="使用ctx.isPointInPath(x, y)来判断"></a>使用ctx.isPointInPath(x, y)来判断</h4><p>在 canvas 中，我们可以使用ctx.isPointInPath(x, y)来判断点是否在当前ctx围成的区域中。</p>
<p><font color=#D4B51B>注意：ctx.isPointInPath(x, y)判断的区域指的是当前最后一条路径（即最后一次beginPath()）的最后一次子路径（即最后一次moveTo()）围城的区域,同时ctx.scale不能设置成倍数，否则得进行其他处理</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 框选处理</span><br><span class="line">handleChoosePen () &#123;</span><br><span class="line">  &#x2F;&#x2F; this.eles 储存当前笔记的数组，每一个元素就是一条笔记（一条笔记是一个对象）</span><br><span class="line">  if (this.eles.length &lt; 1) return</span><br><span class="line">  &#x2F;&#x2F; 获取框选的笔记,</span><br><span class="line">  let chooseZone &#x3D; this.eles.pop()</span><br><span class="line">  &#x2F;&#x2F; this.historyIndex记录当前显示笔记的index</span><br><span class="line">  this.historyIndex &#x3D; this.eles.length - 1</span><br><span class="line">  if (chooseZone.drawPoints.length &lt; 1) return</span><br><span class="line">  let choosedEleIdxArr &#x3D; [] &#x2F;&#x2F; 被选中的笔记index</span><br><span class="line">  let choosedEleZoomOpt &#x3D; null &#x2F;&#x2F; 被选中的区域框</span><br><span class="line">  &#x2F;&#x2F; 点选，点选的话就是将当前点为中心的一个正方形区域</span><br><span class="line">  if (chooseZone.drawPoints.length &lt;&#x3D; 10) &#123;</span><br><span class="line">    this.clear(this.ctxTemp, this.canvTemp)</span><br><span class="line">    let clickPoint &#x3D; chooseZone.drawPoints[0]</span><br><span class="line">    let baseRect &#x3D; 20</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(clickPoint.x - baseRect &#x2F; 2, clickPoint.y - baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.lineTo(clickPoint.x - baseRect &#x2F; 2, clickPoint.y + baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.lineTo(clickPoint.x + baseRect &#x2F; 2, clickPoint.y + baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.lineTo(clickPoint.x + baseRect &#x2F; 2, clickPoint.y - baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.fill()</span><br><span class="line">    let arr &#x3D; [</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x - baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y - baseRect &#x2F; 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x - baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y + baseRect &#x2F; 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x + baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y + baseRect &#x2F; 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x + baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y - baseRect &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    chooseZone.drawPoints &#x3D; arr</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圈选</span><br><span class="line">  let chooseZoneInfo &#x3D; this.getPenOuterZone(chooseZone.drawPoints)</span><br><span class="line">  let shapePoint &#x3D; new ShapePoint()</span><br><span class="line">  for (let i &#x3D; 0; i &lt; this.eles.length; i++) &#123;</span><br><span class="line">    let tmpEle &#x3D; this.eles[i]</span><br><span class="line">    &#x2F;&#x2F; 检测当前笔记是几何图形</span><br><span class="line">    if (tmpEle.type &#x3D;&#x3D;&#x3D; &#39;shape&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 获取几何图形的点，通过线获取点</span><br><span class="line">      let shapeArr &#x3D; shapePoint._getShapePoints(tmpEle.config.type, tmpEle.config.start, tmpEle.config.end)</span><br><span class="line">      tmpEle.drawPoints &#x3D; shapeArr</span><br><span class="line">    &#125;</span><br><span class="line">    if (tmpEle.type &#x3D;&#x3D;&#x3D; &#39;pen&#39; || tmpEle.type &#x3D;&#x3D;&#x3D; &#39;shape&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 获取每一个笔记的外框</span><br><span class="line">      const info &#x3D; this.getPenOuterZone(tmpEle.drawPoints)</span><br><span class="line">      &#x2F;&#x2F; 判断选中区域的外框与笔记外框是否相交</span><br><span class="line">      if (this.isRectOverlap(chooseZoneInfo, info)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 对每一个点进行检测</span><br><span class="line">        for (let j &#x3D; 0; j &lt; tmpEle.drawPoints.length; j++) &#123;</span><br><span class="line">          let point &#x3D; tmpEle.drawPoints[j]</span><br><span class="line">          &#x2F;&#x2F; 判断点是否在选中区域的外框，如果在外框中则使用isPointInPath判断</span><br><span class="line">          if (this.isPointInRect(point, chooseZoneInfo) &amp;&amp; this.ctxTemp.isPointInPath(point.x, point.y)) &#123;</span><br><span class="line">            console.warn(&#96;第$&#123;i + 1&#125;笔被选中&#96;)</span><br><span class="line">            choosedEleIdxArr.push(i)</span><br><span class="line">            break</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  this.clear(this.ctxTemp, this.canvTemp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取笔记的外方框</span><br><span class="line">getPenOuterZone (pointList &#x3D; []) &#123;</span><br><span class="line">  if (pointList.length &lt; 1) return null</span><br><span class="line">  let left &#x3D; pointList[0].x</span><br><span class="line">  let right &#x3D; pointList[0].x</span><br><span class="line">  let top &#x3D; pointList[0].y</span><br><span class="line">  let bottom &#x3D; pointList[0].y</span><br><span class="line">  for (let i &#x3D; 1; i &lt; pointList.length; i++) &#123;</span><br><span class="line">    if (pointList[i].x &lt; left) &#123;</span><br><span class="line">      left &#x3D; pointList[i].x</span><br><span class="line">    &#125;</span><br><span class="line">    if (pointList[i].x &gt; right) &#123;</span><br><span class="line">      right &#x3D; pointList[i].x</span><br><span class="line">    &#125;</span><br><span class="line">    if (pointList[i].y &lt; top) &#123;</span><br><span class="line">      top &#x3D; pointList[i].y</span><br><span class="line">    &#125;</span><br><span class="line">    if (pointList[i].y &gt; bottom) &#123;</span><br><span class="line">      bottom &#x3D; pointList[i].y</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; if (top &lt;&#x3D; bottom || left &lt;&#x3D; right) &#123;</span><br><span class="line">  &#x2F;&#x2F;   return null</span><br><span class="line">  &#x2F;&#x2F; &#125;</span><br><span class="line">  return &#123;</span><br><span class="line">    left: left,</span><br><span class="line">    right: right,</span><br><span class="line">    top: top,</span><br><span class="line">    bottom: bottom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断两个方框是否相交</span><br><span class="line">isRectOverlap (r1, r2) &#123;</span><br><span class="line">  return !(((r1.right &lt; r2.left) || (r1.bottom &lt; r2.top)) || ((r2.right &lt; r1.left) || (r2.bottom &lt; r1.top)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断点是否在方框里</span><br><span class="line">isPointInRect (point, r) &#123;</span><br><span class="line">  return ((point.x &gt;&#x3D; r.left) &amp;&amp; (point.x &lt;&#x3D; r.right) &amp;&amp; (point.y &gt;&#x3D; r.top) &amp;&amp; (point.y &lt;&#x3D; r.bottom))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端</category>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>distribute-system/readme</title>
    <url>/2021/07/16/distribute-system/readme/</url>
    <content><![CDATA[<h1 id="分布式专题"><a href="#分布式专题" class="headerlink" title="分布式专题"></a>分布式专题</h1><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><ul>
<li>partition</li>
</ul>
<p>将数据分发到不同节点上</p>
<ul>
<li>replication</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li><p>网络</p>
</li>
<li><p>节点故障</p>
</li>
</ul>
<h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>一致性</p>
</li>
<li><p>可用性</p>
</li>
<li><p>分区容忍性</p>
</li>
</ul>
<h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><h2 id="分布式一致性算法"><a href="#分布式一致性算法" class="headerlink" title="分布式一致性算法"></a>分布式一致性算法</h2><h3 id="reft"><a href="#reft" class="headerlink" title="reft"></a>reft</h3><h3 id="paxo"><a href="#paxo" class="headerlink" title="paxo"></a>paxo</h3><h2 id="多端同步方案"><a href="#多端同步方案" class="headerlink" title="多端同步方案"></a>多端同步方案</h2><h3 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h3><h2 id="zoomkeeper"><a href="#zoomkeeper" class="headerlink" title="zoomkeeper"></a>zoomkeeper</h2><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><ul>
<li>若是6次确认失败的子链该怎么办？</li>
</ul>
<p>由于解题能力和矿工的数量成正比，因此两条链的增长速度也是不一样的，在一段时间之后，总有一条链的长度要超过另一条。当矿工发现全网有一条更长的链时，他就会抛弃他当前的链，把新的更长的链全部复制回来，在这条链的基础上继续挖矿。所有矿工都这样操作，这条链就成为了主链，分叉出来被抛弃掉的链就消失了。</p>
]]></content>
  </entry>
  <entry>
    <title>database/redis/redis-realize-persistence-cache</title>
    <url>/2021/07/16/database/redis/redis-realize-persistence-cache/</url>
    <content><![CDATA[<h1 id="redis如何实现持久化缓存"><a href="#redis如何实现持久化缓存" class="headerlink" title="redis如何实现持久化缓存"></a>redis如何实现持久化缓存</h1><p>Redis有两种持久化的方式：快照（RDB文件）和追加式文件（AOF文件）</p>
<blockquote>
<p>RDB (Redis DataBase)</p>
</blockquote>
<p>在指定的时间内将内存的数据快照写入磁盘，也就是行话讲的snapshot快照，他恢复时是将快照文件直接读到内存里的。</p>
<p>Redis会单独fork一个子进程来实现持久化，会将数据写入到一个临时文件中，待持久化过程都结束了，再用这个文件替换上次持久化的文件。整个过程，主进程是不进行任何IO操作的 这就确保了极高的性能，如果需要进行大规模的数据恢复，且对数据恢复的完整性不是很敏感，那RDB方式要比AOF方式更加的高效。RDF的缺点是最后一次持久化的数据可能丢失。</p>
<blockquote>
<p>AOF(Append Only File)</p>
</blockquote>
<p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来（读操作不记录）只允许追加文件但不可以改文件，redis启动之初会读取该文件重构建数据，也就是【重放】。换言之，redis重启的话会根据日志文件的内容将写指令从前到后执行一次以完成数据恢复工作。</p>
]]></content>
  </entry>
  <entry>
    <title>canvas基础</title>
    <url>/2021/07/16/fontend/awesome-canvas/canvas-base/</url>
    <content><![CDATA[<h1 id="canvas基础"><a href="#canvas基础" class="headerlink" title="canvas基础"></a>canvas基础</h1><hr>
<h2 id="初始化画布"><a href="#初始化画布" class="headerlink" title="初始化画布"></a>初始化画布</h2><p>在html中声明画布，本例中画布的长为 1366px 宽为 768px (可根据需求自定义)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;canvas id&#x3D;&quot;canvas&quot; style&#x3D;&quot;width: 1366px; height: 768px;&quot;&gt;&lt;&#x2F;canvas&gt;</span><br></pre></td></tr></table></figure>

<p>在 js 中初始化画布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let canv &#x3D; document.getElementById(&#39;canvas&#39;) &#x2F;&#x2F; 获取canvas dom对象</span><br><span class="line">let ctx &#x3D; canv.getContext(&#39;2d&#39;) &#x2F;&#x2F; 得到 canvas CanvasRenderingContext2D对象，对画布的操作基本都是基于ctx来的</span><br></pre></td></tr></table></figure>

<h2 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h2><blockquote>
<p>图形的基本元素是路径，路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p>
</blockquote>
<p><font color=#D4B51B>路径的绘制步骤？</font><br></p>
<ol>
<li>首先，你需要创建路径起始点(beginPath(), moveTo())</li>
<li>然后你使用画图命令去画出路径(lineTo(), arcTo()等)</li>
<li>把路径封闭(不是必须的)(closePath())</li>
<li>一旦路径生成，你就能通过描边或填充路径区域来渲染图形(fill, stroke)</li>
</ol>
<p>我们来一一说下这几个绘图常用的api</p>
<p><code>beginPath()</code> 新建一条路径</p>
<p><code>moveTo(x, y)</code> 在当前路径下新建一条子路径，并将笔触移动到指定的坐标x以及y上</p>
<p><code>lineTo(x, y)</code> 绘制一条从当前位置到指定x以及y位置的直线</p>
<p><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code> 画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成</p>
<p><code>quadraticCurveTo(cp1x, cp1y, x, y)</code> 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点</p>
<p><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code> 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点</p>
<p><code>stroke()</code> 通过线条来绘制图形轮廓</p>
<p><code>fill()</code> 通过填充路径的内容区域生成实心的图形</p>
<p>比如我们要绘制一个实心三角形，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function draw() &#123;</span><br><span class="line">  var canvas &#x3D; document.getElementById(&#39;canvas&#39;);</span><br><span class="line">  if (canvas.getContext) &#123;</span><br><span class="line">    var ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(75, 50);</span><br><span class="line">    ctx.lineTo(100, 75);</span><br><span class="line">    ctx.lineTo(100, 25);</span><br><span class="line">    ctx.fill(); &#x2F;&#x2F; 填充图形区域</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Path2D 对象 – Path2D()会返回一个新初始化的Path2D对象（可能将某一个路径作为变量——创建一个它的副本，或者将一个包含SVG path数据的字符串作为变量）</p>
</blockquote>
<h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><blockquote>
<p>色彩 如果我们想要给图形上色，有两个重要的属性可以做到：fillStyle 和 strokeStyle</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctx.fillStyle &#x3D; &quot;rgb(255,165,0)&quot;; &#x2F;&#x2F; 填充颜色值</span><br><span class="line">ctx.strokeStyle &#x3D; &quot;rgba(255,165,0,1)&quot;; &#x2F;&#x2F; 边框颜色值</span><br></pre></td></tr></table></figure>

<p>我们用下面的方法新建一个 canvasGradient 对象，并且赋给图形的 fillStyle 或 strokeStyle 属性，实现线性或者径向的渐变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var lingrad2 &#x3D; ctx.createLinearGradient(0,50,0,95);</span><br><span class="line">lingrad2.addColorStop(0.5, &#39;#000&#39;);</span><br><span class="line">lingrad2.addColorStop(1, &#39;rgba(0,0,0,0)&#39;);</span><br><span class="line">ctx.strokeStyle &#x3D; lingrad2;</span><br></pre></td></tr></table></figure>

<p>也可以使用图案的应用跟渐变很类似的，创建出一个 pattern 之后，赋给 fillStyle 或 strokeStyle 属性即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var img &#x3D; new Image();</span><br><span class="line">img.src &#x3D; &#39;someimage.png&#39;;</span><br><span class="line">var ptrn &#x3D; ctx.createPattern(img,&#39;repeat&#39;);</span><br><span class="line">ctx.fillStyle &#x3D; ptrn;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>线条样式 通过lineTo() arc()等绘制路径的api所绘制的线条都受它的影响</p>
</blockquote>
<p><code>lineWidth = value</code>  线条的宽度</p>
<p><code>lineCap = type type=[butt, round, square]</code> 线条尾端的样式</p>
<p><code>lineJoin = type type=[round, bevel, miter]</code> 设定线条与线条间接合处的样式</p>
<p><code>setLineDash(segments)</code> 设置当前虚线样式</p>
<h2 id="save-与-restore"><a href="#save-与-restore" class="headerlink" title="save() 与 restore()"></a>save() 与 restore()</h2><h2 id="两层画布"><a href="#两层画布" class="headerlink" title="两层画布"></a>两层画布</h2>]]></content>
      <categories>
        <category>web前端</category>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>database/readme</title>
    <url>/2021/07/16/database/readme/</url>
    <content><![CDATA[<h1 id="database"><a href="#database" class="headerlink" title="database"></a>database</h1><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ul>
<li><a href="">redis-realize-persistence-cache</a> - redis如何实现持久化缓存</li>
</ul>
<h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h2>]]></content>
  </entry>
  <entry>
    <title>awesome-animation/readme</title>
    <url>/2021/07/16/awesome-animation/readme/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>实现一套以IP动画为核心的能力</p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在线教育</p>
<h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><ul>
<li><p><a href="">question-list.md</a> - 问题列表</p>
</li>
<li><p><a href="">todo-list.md</a> - 待做列表</p>
</li>
<li><p><a href="">tech-plan.md</a> - 技术开发文档</p>
</li>
</ul>
<h2 id="产品文档"><a href="#产品文档" class="headerlink" title="产品文档"></a>产品文档</h2><ul>
<li><a href="">product.md</a> - 教育游戏开发文档</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>awesome-animation/tech-plan</title>
    <url>/2021/07/16/awesome-animation/tech-plan/</url>
    <content><![CDATA[<h1 id="技术文档"><a href="#技术文档" class="headerlink" title="技术文档"></a>技术文档</h1><h1 id="精灵类开发"><a href="#精灵类开发" class="headerlink" title="精灵类开发"></a>精灵类开发</h1><p>接受以 图片，文字 为核心的精灵基类，提供 点击，拖拽 等一些基础操作</p>
<blockquote>
<p>Question： phaser 接入 该基类</p>
</blockquote>
<h1 id="游戏关键点"><a href="#游戏关键点" class="headerlink" title="游戏关键点"></a>游戏关键点</h1><p>阶段性游戏，阶段性未达到时进行一些提示</p>
]]></content>
  </entry>
  <entry>
    <title>awesome-animation/todo-list</title>
    <url>/2021/07/16/awesome-animation/todo-list/</url>
    <content><![CDATA[<h1 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO-LIST"></a>TODO-LIST</h1><h2 id="免费IP提供网站"><a href="#免费IP提供网站" class="headerlink" title="免费IP提供网站"></a>免费IP提供网站</h2><h2 id="PS制作-动画制作"><a href="#PS制作-动画制作" class="headerlink" title="PS制作 动画制作"></a>PS制作 动画制作</h2><h2 id="场景设计（视频）"><a href="#场景设计（视频）" class="headerlink" title="场景设计（视频）"></a>场景设计（视频）</h2><h2 id="互动开发"><a href="#互动开发" class="headerlink" title="互动开发"></a>互动开发</h2><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2>]]></content>
  </entry>
  <entry>
    <title>awesome-animation/product</title>
    <url>/2021/07/16/awesome-animation/product/</url>
    <content><![CDATA[<h1 id="教育产品开发"><a href="#教育产品开发" class="headerlink" title="教育产品开发"></a>教育产品开发</h1><h2 id="游戏互动"><a href="#游戏互动" class="headerlink" title="游戏互动"></a>游戏互动</h2><h2 id="视频讲解"><a href="#视频讲解" class="headerlink" title="视频讲解"></a>视频讲解</h2>]]></content>
  </entry>
</search>
