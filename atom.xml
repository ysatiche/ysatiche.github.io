<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaroku&#39;s Blog Page</title>
  
  <subtitle>Blog for happy Code &amp; Life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ysatiche.github.io/"/>
  <updated>2021-07-16T14:26:40.669Z</updated>
  <id>https://ysatiche.github.io/</id>
  
  <author>
    <name>Yaroku</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>todolist</title>
    <link href="https://ysatiche.github.io/2021/07/16/todolist/"/>
    <id>https://ysatiche.github.io/2021/07/16/todolist/</id>
    <published>2021-07-16T14:26:40.669Z</published>
    <updated>2021-07-16T14:26:40.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fontend"><a href="#fontend" class="headerlink" title="fontend"></a>fontend</h1><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h2 id="互动（phaser，cocos）"><a href="#互动（phaser，cocos）" class="headerlink" title="互动（phaser，cocos）"></a>互动（phaser，cocos）</h2><h2 id="web项目（vue-react-webpack-electron"><a href="#web项目（vue-react-webpack-electron" class="headerlink" title="web项目（vue/react + webpack + electron)"></a>web项目（vue/react + webpack + electron)</h2><h2 id="canvas-笔记"><a href="#canvas-笔记" class="headerlink" title="canvas(笔记)"></a>canvas(笔记)</h2><h1 id="backend（go）"><a href="#backend（go）" class="headerlink" title="backend（go）"></a>backend（go）</h1><h2 id="语法基础-1"><a href="#语法基础-1" class="headerlink" title="语法基础"></a>语法基础</h2><h2 id="resetful服务（echo框架等）"><a href="#resetful服务（echo框架等）" class="headerlink" title="resetful服务（echo框架等）"></a>resetful服务（echo框架等）</h2><h2 id="docker-k8s布置"><a href="#docker-k8s布置" class="headerlink" title="docker/k8s布置"></a>docker/k8s布置</h2><h2 id="缓存-并发处理-（redis-rabbitmq-nginx）"><a href="#缓存-并发处理-（redis-rabbitmq-nginx）" class="headerlink" title="缓存/并发处理 （redis + rabbitmq + nginx）"></a>缓存/并发处理 （redis + rabbitmq + nginx）</h2><h1 id="deeplearning（python）"><a href="#deeplearning（python）" class="headerlink" title="deeplearning（python）"></a>deeplearning（python）</h1><h2 id="语法基础-2"><a href="#语法基础-2" class="headerlink" title="语法基础"></a>语法基础</h2><h2 id="deeplearn基础"><a href="#deeplearn基础" class="headerlink" title="deeplearn基础"></a>deeplearn基础</h2><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><h1 id="商业项目"><a href="#商业项目" class="headerlink" title="商业项目"></a>商业项目</h1><h2 id="动画IP显示"><a href="#动画IP显示" class="headerlink" title="动画IP显示"></a>动画IP显示</h2><ul><li><a href="./awesome-animation">教育动画展示</a> - </li></ul><h2 id="翻译小说"><a href="#翻译小说" class="headerlink" title="翻译小说"></a>翻译小说</h2><h2 id="摩比调研"><a href="#摩比调研" class="headerlink" title="摩比调研"></a>摩比调研</h2><ul><li><a href="./mobby-research">mobby-research</a> - 摩比调研</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fontend&quot;&gt;&lt;a href=&quot;#fontend&quot; class=&quot;headerlink&quot; title=&quot;fontend&quot;&gt;&lt;/a&gt;fontend&lt;/h1&gt;&lt;h2 id=&quot;语法基础&quot;&gt;&lt;a href=&quot;#语法基础&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mobby-research/mobby-germination</title>
    <link href="https://ysatiche.github.io/2021/07/16/mobby-research/mobby-germination/"/>
    <id>https://ysatiche.github.io/2021/07/16/mobby-research/mobby-germination/</id>
    <published>2021-07-16T14:26:40.668Z</published>
    <updated>2021-07-16T14:26:40.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摩比萌芽篇"><a href="#摩比萌芽篇" class="headerlink" title="摩比萌芽篇"></a>摩比萌芽篇</h1><h2 id="火柴游戏"><a href="#火柴游戏" class="headerlink" title="火柴游戏"></a>火柴游戏</h2><p>使用 【火柴】道具来实现</p><blockquote><p>目的</p></blockquote><p>简单点数方法：按顺序，做标记</p><p>模仿拼摆：正方形，三角形，数字</p><p>图案变换：将图形放大，移动火柴改变图案</p><h2 id="平均分"><a href="#平均分" class="headerlink" title="平均分"></a>平均分</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摩比萌芽篇&quot;&gt;&lt;a href=&quot;#摩比萌芽篇&quot; class=&quot;headerlink&quot; title=&quot;摩比萌芽篇&quot;&gt;&lt;/a&gt;摩比萌芽篇&lt;/h1&gt;&lt;h2 id=&quot;火柴游戏&quot;&gt;&lt;a href=&quot;#火柴游戏&quot; class=&quot;headerlink&quot; title=&quot;火柴游戏&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mobby-research/readme</title>
    <link href="https://ysatiche.github.io/2021/07/16/mobby-research/readme/"/>
    <id>https://ysatiche.github.io/2021/07/16/mobby-research/readme/</id>
    <published>2021-07-16T14:26:40.668Z</published>
    <updated>2021-07-16T14:26:40.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摩比爱数学"><a href="#摩比爱数学" class="headerlink" title="摩比爱数学"></a>摩比爱数学</h1><p>调研 【摩比爱数学】 【小学数学人教版】</p><h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><ul><li><p><a href="">mobby-actor.md</a> - 摩比形象</p></li><li><p><a href="">mobby-germination.md</a> - 摩比 【萌芽篇】</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摩比爱数学&quot;&gt;&lt;a href=&quot;#摩比爱数学&quot; class=&quot;headerlink&quot; title=&quot;摩比爱数学&quot;&gt;&lt;/a&gt;摩比爱数学&lt;/h1&gt;&lt;p&gt;调研 【摩比爱数学】 【小学数学人教版】&lt;/p&gt;
&lt;h2 id=&quot;文章列表&quot;&gt;&lt;a href=&quot;#文章列表&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>test/test</title>
    <link href="https://ysatiche.github.io/2021/07/16/test/test/"/>
    <id>https://ysatiche.github.io/2021/07/16/test/test/</id>
    <published>2021-07-16T14:26:40.668Z</published>
    <updated>2021-07-16T14:26:40.668Z</updated>
    
    <content type="html"><![CDATA[import React, { Component, useState } from 'react'import { useSelector, useDispatch } from 'react-redux'const Main = () => {  const [listName, setListName] = useState('')  const todoList = useSelector(state => state.todoList)  const dispatch = useDispatch()  const addToDoList = () => {    dispatch({      type: 'ADD_TODOLIST',      payload    })  }  return (      )}]]></content>
    
    <summary type="html">
    
      
      
        
import React, { Component, useState } from &#39;react&#39;
import { useSelector, useDispatch } from &#39;react-redux&#39;


const Main = () =&gt; {
  const [l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ysatiche.github.io/2021/07/16/hello-world/"/>
    <id>https://ysatiche.github.io/2021/07/16/hello-world/</id>
    <published>2021-07-16T14:26:40.667Z</published>
    <updated>2021-07-16T14:26:40.667Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>interview</title>
    <link href="https://ysatiche.github.io/2021/07/16/interview/"/>
    <id>https://ysatiche.github.io/2021/07/16/interview/</id>
    <published>2021-07-16T14:26:40.667Z</published>
    <updated>2021-07-16T14:26:40.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h2 id="链式调用实现"><a href="#链式调用实现" class="headerlink" title="链式调用实现"></a>链式调用实现</h2><h2 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h2><h2 id="二叉搜索树-返回一棵-平衡后-的二叉搜索树"><a href="#二叉搜索树-返回一棵-平衡后-的二叉搜索树" class="headerlink" title="二叉搜索树 返回一棵 平衡后 的二叉搜索树"></a>二叉搜索树 返回一棵 平衡后 的二叉搜索树</h2><h2 id="最大连续子序列的和"><a href="#最大连续子序列的和" class="headerlink" title="最大连续子序列的和"></a>最大连续子序列的和</h2><h2 id="js-和-ts的区别"><a href="#js-和-ts的区别" class="headerlink" title="js 和 ts的区别"></a>js 和 ts的区别</h2><h2 id="vue和react和jquery区别"><a href="#vue和react和jquery区别" class="headerlink" title="vue和react和jquery区别"></a>vue和react和jquery区别</h2><h2 id="webpack-使用"><a href="#webpack-使用" class="headerlink" title="webpack 使用"></a>webpack 使用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; title=&quot;自我介绍&quot;&gt;&lt;/a&gt;自我介
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>fontend/readme</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/readme/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/readme/</id>
    <published>2021-07-16T14:26:40.667Z</published>
    <updated>2021-07-16T14:26:40.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="todolist"><a href="#todolist" class="headerlink" title="todolist"></a>todolist</h1><ul><li><p>vue 依赖收集</p></li><li><p>js多种继承</p></li></ul><h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><p>webpack/vue/react/qiankun</p><p>electron/weex/小程序</p><p>canvas/phaser/cocos</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;todolist&quot;&gt;&lt;a href=&quot;#todolist&quot; class=&quot;headerlink&quot; title=&quot;todolist&quot;&gt;&lt;/a&gt;todolist&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vue 依赖收集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;js多种继承&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/question-list/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/question-list/</id>
    <published>2021-07-16T14:26:40.666Z</published>
    <updated>2021-07-16T14:26:40.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="question-list"><a href="#question-list" class="headerlink" title="question list"></a>question list</h1><h2 id="webpack-中-target-含义"><a href="#webpack-中-target-含义" class="headerlink" title="webpack 中 target 含义"></a>webpack 中 target 含义</h2><p><code>target</code> 目标构建编译</p><p><code>web</code> <code>node</code> <code>electron-main</code> <code>electron-renderer</code></p><h2 id="webpack-中-resolve-alias-含义"><a href="#webpack-中-resolve-alias-含义" class="headerlink" title="webpack 中 resolve alias 含义"></a>webpack 中 resolve alias 含义</h2><h2 id="babel版本差异-核心几个库之间区别"><a href="#babel版本差异-核心几个库之间区别" class="headerlink" title="babel版本差异 核心几个库之间区别"></a>babel版本差异 核心几个库之间区别</h2><h2 id="webpack-打包成库和工程间有什么区别"><a href="#webpack-打包成库和工程间有什么区别" class="headerlink" title="webpack 打包成库和工程间有什么区别"></a>webpack 打包成库和工程间有什么区别</h2><p><code>output.libraryTarget</code> 将这个值赋予 <code>output.library</code></p><p>常见值：</p><blockquote><p>var</p></blockquote><p>将值作为变量声明导出</p><blockquote><p>window</p></blockquote><p>当 <code>library</code> 加载完成 入口起点的返回值分配给 window 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[<span class="string">'MyLibrary'</span>] = _entry_return_</span><br><span class="line"><span class="built_in">window</span>.MyLibrary.doSomething()</span><br></pre></td></tr></table></figure><blockquote><p>global</p></blockquote><blockquote><p>commonjs</p></blockquote><blockquote><p>amd</p></blockquote><blockquote><p>umd</p></blockquote><h2 id="webpack-external"><a href="#webpack-external" class="headerlink" title="webpack external"></a>webpack external</h2><p>externals 指定当前哪些库不被打入 bundle.js</p><p>所以需要自己额外引入</p><h2 id="webpack3-webpack4-之间区别"><a href="#webpack3-webpack4-之间区别" class="headerlink" title="webpack3 webpack4 之间区别"></a>webpack3 webpack4 之间区别</h2><ol><li><p>增加一个 mode: development | production</p></li><li><p>babel使用新命名空间 @babel</p></li><li><p>支持es6的方式导入JSON文件</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;question-list&quot;&gt;&lt;a href=&quot;#question-list&quot; class=&quot;headerlink&quot; title=&quot;question list&quot;&gt;&lt;/a&gt;question list&lt;/h1&gt;&lt;h2 id=&quot;webpack-中-target-含义&quot;&gt;
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
      <category term="webpack" scheme="https://ysatiche.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/readme/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/readme/</id>
    <published>2021-07-16T14:26:40.666Z</published>
    <updated>2021-07-16T14:26:40.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="blog-list"><a href="#blog-list" class="headerlink" title="blog list"></a>blog list</h1><ul><li><p><a href="">babel-loader.md</a> - loader的用法 babel-loader使用</p></li><li><p><a href="">question-list.md</a> - webpack相关问题列表</p></li><li><p><a href="">ast.md</a> - webpack 中AST语法树递归解析 解析源码</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://www.ershicimi.com/p/31512053e0b77396df07baa8da53c8bb" target="_blank" rel="noopener">实现一个简易的 webpack</a> - 实现一个简易的 webpack</p></li><li><p>[nice blog] <a href="https://juejin.im/post/6850418113901985805" target="_blank" rel="noopener">从实现一个简单的webpack中看广度深度算法</a> - 从实现一个简单的webpack中看广度深度算法 </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;blog-list&quot;&gt;&lt;a href=&quot;#blog-list&quot; class=&quot;headerlink&quot; title=&quot;blog list&quot;&gt;&lt;/a&gt;blog list&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;babel-loader.md&lt;/a&gt; - 
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
      <category term="webpack" scheme="https://ysatiche.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>fontend/awesome-webpack/realize-simple-webpack</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/realize-simple-webpack/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/realize-simple-webpack/</id>
    <published>2021-07-16T14:26:40.666Z</published>
    <updated>2021-07-16T14:26:40.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现一个简单的webpack"><a href="#实现一个简单的webpack" class="headerlink" title="实现一个简单的webpack"></a>实现一个简单的webpack</h1><h2 id="webpack流程图"><a href="#webpack流程图" class="headerlink" title="webpack流程图"></a>webpack流程图</h2><p><img src="./img/webpack.png" alt="webpack流程图"></p><blockquote><p>具体流程</p></blockquote><ol><li><p>利用babel完成代码转换，并生成单个文件的依赖: @bable/parse 可以生成 AST; @babel/traverse 进行AST遍历，记录依赖关系；最后用@babel/core和@babel/preset-env进行代码的转换</p></li><li><p>生成依赖图谱</p></li><li><p>生成最后打包代码</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>第一步</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// npm install @babel/parse @babel/traverse @babel/core @babel/preset-env</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepOne</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// read file</span></span><br><span class="line">  <span class="keyword">const</span> ast = readFile(filename)</span><br><span class="line">  <span class="comment">// 遍历ast抽象语法</span></span><br><span class="line">  <span class="keyword">const</span> dependencies = traverseAST(ast)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过@babel/core 和 @babel/preset-env 进行代码的转换</span></span><br><span class="line">  <span class="keyword">const</span> &#123; code &#125; = babel.transformFromAst(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">    presets: [<span class="string">'@babel/preet-env'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回文件名称 依赖关系</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    filename,</span><br><span class="line">    dependencies,</span><br><span class="line">    code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> content = fs.readFileSync(filename, <span class="string">'utf-8'</span>)</span><br><span class="line">  <span class="keyword">const</span> ast = parser.parse(content, &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span> <span class="comment">// babel官方规定必须加这个参数 不然无法识别ES MODULE</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> ast</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseAST</span> (<span class="params">ast</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dependencies = &#123;&#125;</span><br><span class="line">  traverse(ast, &#123;</span><br><span class="line">    <span class="comment">// 获取通过import引入的模块</span></span><br><span class="line">    ImportDeclaration(&#123;code&#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> dirname = path.dirname(filename)</span><br><span class="line">      <span class="keyword">const</span> newFile = <span class="string">'./'</span> + path.join(dirname, node.source.value)</span><br><span class="line">      <span class="comment">// 保存所依赖的模块</span></span><br><span class="line">      dependencies[node.source.value] = newFile</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> dependencies</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二步 生成相应的依赖图</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepTwo</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先拿到带有依赖的AST对象</span></span><br><span class="line">  <span class="keyword">const</span> entryModule = stepOne(entry)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用深度优先算法获取图谱</span></span><br><span class="line">  <span class="keyword">const</span> graphArray = getGraphArray(entryModule)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成2图谱</span></span><br><span class="line">  <span class="keyword">const</span> graph = getGraph(graphArray) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> graph</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGraphArray</span>(<span class="params">entryModule</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> graphArray = [entryModule]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; graphArray.length; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> item = graphArray[i];</span><br><span class="line">        <span class="keyword">const</span> &#123;dependencies&#125; = item;<span class="comment">//拿到文件所依赖的模块集合(键值对存储)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> dependencies)&#123;</span><br><span class="line">            graphArray.push(</span><br><span class="line">                one(dependencies[j])</span><br><span class="line">            )<span class="comment">//敲黑板！关键代码，目的是将入口模块及其所有相关的模块放入数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGraph</span>(<span class="params">graphArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> graph = &#123;&#125;</span><br><span class="line">  graphArray.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      graph[item.filename] = &#123;</span><br><span class="line">          dependencies: item.dependencies,</span><br><span class="line">          code: item.code</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> graph</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里就应该大概知道代码是如何处理这种AST树的了，就和算法中处理二叉树是一样，找到规律，不断的循环</p><blockquote><p>第三步：生成代码字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepThree</span>(<span class="params">entry</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// //要先把对象转换为字符串，不然在下面的模板字符串中会默认调取对象的toString方法，参数变成[Object object],显然不行</span></span><br><span class="line">    <span class="keyword">const</span> graph = <span class="built_in">JSON</span>.stringify(stepTwo(entry))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        (function(graph) &#123;</span></span><br><span class="line"><span class="string">            //require函数的本质是执行一个模块的代码，然后将相应变量挂载到exports对象上</span></span><br><span class="line"><span class="string">            function require(module) &#123;</span></span><br><span class="line"><span class="string">                //localRequire的本质是拿到依赖包的exports变量</span></span><br><span class="line"><span class="string">                function localRequire(relativePath) &#123;</span></span><br><span class="line"><span class="string">                    return require(graph[module].dependencies[relativePath]);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                var exports = &#123;&#125;;</span></span><br><span class="line"><span class="string">                (function(require, exports, code) &#123;</span></span><br><span class="line"><span class="string">                    eval(code);</span></span><br><span class="line"><span class="string">                &#125;)(localRequire, exports, graph[module].code);</span></span><br><span class="line"><span class="string">                return exports;//函数返回指向局部变量，形成闭包，exports变量在函数执行后不会被摧毁</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            require('<span class="subst">$&#123;entry&#125;</span>')</span></span><br><span class="line"><span class="string">        &#125;)(<span class="subst">$&#123;graph&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以测试下：console.log(stepThree('./src/index.js'))</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现一个简单的webpack&quot;&gt;&lt;a href=&quot;#实现一个简单的webpack&quot; class=&quot;headerlink&quot; title=&quot;实现一个简单的webpack&quot;&gt;&lt;/a&gt;实现一个简单的webpack&lt;/h1&gt;&lt;h2 id=&quot;webpack流程图&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/babel-loader/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/babel-loader/</id>
    <published>2021-07-16T14:26:40.665Z</published>
    <updated>2021-07-16T14:26:40.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><h2 id="loader-features"><a href="#loader-features" class="headerlink" title="loader features"></a>loader features</h2><ul><li><p>Loader can be chanied.</p></li><li><p>Loader can be synchronous or asynchronous</p></li><li><p>Loader run in nodejs</p></li><li><p>Loader can be configured with an options object</p></li></ul><h1 id="从-babel-loader-看如何实现一个简单-loader"><a href="#从-babel-loader-看如何实现一个简单-loader" class="headerlink" title="从 babel-loader 看如何实现一个简单 loader"></a>从 babel-loader 看如何实现一个简单 loader</h1><h2 id="laoder-interface"><a href="#laoder-interface" class="headerlink" title="laoder interface"></a>laoder interface</h2><p>A loader is just a JavaScript module that exports a function. The loader runner calls this function and passes the result of the previous loader or the resource file into it. The this context of the function is filled-in by webpack and the loader runner with some useful methods </p><h3 id="basic-loader-usage"><a href="#basic-loader-usage" class="headerlink" title="basic loader usage"></a>basic loader usage</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对source做一系列的转换</span></span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获得-loader-的options"><a href="#获得-loader-的options" class="headerlink" title="获得 loader 的options"></a>获得 loader 的options</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户为当前Loader传入的options</span></span><br><span class="line">    <span class="built_in">console</span>.log(loaderUtils.getOptions(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回其他结果"><a href="#返回其他结果" class="headerlink" title="返回其他结果"></a>返回其他结果</h3><p>如上，我们返回的是转换后的内容，但是有些情况下，我们不仅仅需要返回转换后的内容，还需要返回一些其他的内容，如sourceMap或是AST语法树，那么这时候我们可以使用webpack提供的APIthis.callback，当使用this.callback了，那么我们就必须需要在Loader函数返回undefined,以此来让webpack知道返回的结果在this.callback中，API详细参数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.callback(</span><br><span class="line">  <span class="comment">// 无法装换原内容的Error</span></span><br><span class="line">  err: <span class="built_in">Error</span> || <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 装换后的内容，如上述的source</span></span><br><span class="line">  content: string | Buffer,</span><br><span class="line">  <span class="comment">// 用于通过转换后的内容得出原内容Source Map 方便调试</span></span><br><span class="line">  sourceMap?: SourceMap,</span><br><span class="line">  <span class="comment">// 如果本地转换同时ast语法树 也可以将这个ast返回</span></span><br><span class="line">  abstractSyncTree? AST</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>看看异步Loader在 <code>this.async</code> API下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="keyword">this</span>.async()</span><br><span class="line">  <span class="keyword">const</span> &#123; err, content, sourceMap, AST &#125; = <span class="keyword">await</span> Func()</span><br><span class="line">  callback(err, content, sourceMap, AST)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理二进制数据"><a href="#处理二进制数据" class="headerlink" title="处理二进制数据"></a>处理二进制数据</h3><p>像 <code>file-loader</code> 这样的loader，处理的是二进制数据，那么就需要告诉webpack给loader传入二进制格式的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Buffer) &#123;</span><br><span class="line">    <span class="keyword">return</span> source <span class="comment">// 当然我本身也可以返回二进制数据传给下一个loader</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.raw = <span class="literal">true</span> <span class="comment">// 不设置就会拿到字符串</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://webpack.js.org/concepts/loaders/" target="_blank" rel="noopener">webpack loader</a></p><p><a href="https://webpack.js.org/contribute/writing-a-loader/" target="_blank" rel="noopener">writing a loader</a></p><p><a href="https://webpack.js.org/api/loaders/" target="_blank" rel="noopener">loader interface</a></p><p><a href="https://juejin.im/post/6844903794371723277" target="_blank" rel="noopener">loader 简析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;loader&quot;&gt;&lt;a href=&quot;#loader&quot; class=&quot;headerlink&quot; title=&quot;loader&quot;&gt;&lt;/a&gt;loader&lt;/h1&gt;&lt;h2 id=&quot;loader-features&quot;&gt;&lt;a href=&quot;#loader-features&quot; class
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
      <category term="webpack" scheme="https://ysatiche.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Route</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-route/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-route/</id>
    <published>2021-07-16T14:26:40.664Z</published>
    <updated>2021-07-16T14:26:40.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><h2 id="Basic-Route"><a href="#Basic-Route" class="headerlink" title="Basic Route"></a>Basic Route</h2><p>Simple route if we have a <code>&lt;a href=&quot;#bar&quot;&gt;&lt;/a&gt;</code> when we click it, we can notify window <code>hashchange</code> event.</p><p>Let’s do an simple EXERCISE.</p><ul><li><p>display foo component when url is #foo</p></li><li><p>display bar component when url is #bar</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">    foo: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    bar: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Using-Route-Table"><a href="#Using-Route-Table" class="headerlink" title="Using Route Table"></a>Using Route Table</h2><p>we can use route table to store route info.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;bar&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;foo&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;not found&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> routeTable = &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="string">'bar'</span>: Bar,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'foo'</span>: Foo,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'notfound'</span>: NotFound</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    h(routeTable[<span class="keyword">this</span>.url])</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Complex-Route-Rules"><a href="#Complex-Route-Rules" class="headerlink" title="Complex Route Rules"></a>Complex Route Rules</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;route&quot;&gt;&lt;a href=&quot;#route&quot; class=&quot;headerlink&quot; title=&quot;route&quot;&gt;&lt;/a&gt;route&lt;/h1&gt;&lt;h2 id=&quot;Basic-Route&quot;&gt;&lt;a href=&quot;#Basic-Route&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://ysatiche.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://ysatiche.github.io/tags/vue2/"/>
    
      <category term="route" scheme="https://ysatiche.github.io/tags/route/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/ast/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-webpack/ast/</id>
    <published>2021-07-16T14:26:40.664Z</published>
    <updated>2021-07-16T14:26:40.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AST-语法树递归解析"><a href="#AST-语法树递归解析" class="headerlink" title="AST 语法树递归解析"></a>AST 语法树递归解析</h1><p>webpack 通过文件路径加载模块后，开始对源码进行解析，将其转换成AST语法树，我么需要babel一些包来进行转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">// babylon 主要就是把源码转化为 AST</span></span><br><span class="line"><span class="number">2</span><span class="comment">// @babel/traverse 遍历到对应的节点</span></span><br><span class="line"><span class="number">3</span><span class="comment">// @babel/types  遍历到的节点进行替换</span></span><br><span class="line"><span class="number">4</span><span class="comment">// @babel/generator 替换好的结果进行生成</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">yarn add babylon @babel/traverse @babel/types @babel/generator --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 2 * 功能: 解析源码 —— AST 解析语法树</span></span><br><span class="line"><span class="comment"> 3 * 1、babylon 主要就是把源码转化为 AST</span></span><br><span class="line"><span class="comment"> 4 * 2、@babel/traverse 遍历到对应的节点</span></span><br><span class="line"><span class="comment"> 5 * 3、@babel/types  遍历到的节点进行替换</span></span><br><span class="line"><span class="comment"> 6 * 4、@babel/generator 替换好的结果进行生成</span></span><br><span class="line"><span class="comment"> 7 * </span></span><br><span class="line"><span class="comment"> 8 * 例子：let str = require('./a.js')  =&gt; let str = __webpack_require__("./src\\a.js");</span></span><br><span class="line"><span class="comment"> 9 * </span></span><br><span class="line"><span class="comment">10 * @param &#123;*&#125; source 主入口源码内容</span></span><br><span class="line"><span class="comment">11 * @param &#123;*&#125; parentPath 目录路径 (./src)</span></span><br><span class="line"><span class="comment">12 */</span></span><br><span class="line"><span class="number">13</span> parse(source, parentPath)&#123;</span><br><span class="line"><span class="number">14</span>  <span class="keyword">let</span> ast = babylon.parse(source);</span><br><span class="line"><span class="number">15</span>  <span class="keyword">let</span> dependcies = []; <span class="comment">// 依赖数组</span></span><br><span class="line"><span class="number">16</span>  traverse(ast,&#123;</span><br><span class="line"><span class="number">17</span>    CallExpression(p)&#123;   <span class="comment">// 表达式调用，比如:require()</span></span><br><span class="line"><span class="number">18</span>      <span class="keyword">let</span> node = p.node; <span class="comment">// 获取到对应的节点</span></span><br><span class="line"><span class="number">19</span>      <span class="comment">// 如果当前解析的节点为 require 节点，然后对其改造</span></span><br><span class="line"><span class="number">20</span>      <span class="keyword">if</span>(node.callee.name === <span class="string">'require'</span>)&#123; </span><br><span class="line"><span class="number">21</span>        node.callee.name = <span class="string">"__webpack_require__"</span>;  <span class="comment">// 更改节点名字</span></span><br><span class="line"><span class="number">22</span>        <span class="keyword">let</span> moduleName = node.arguments[<span class="number">0</span>].value;<span class="comment">// 取到引入模块的名字</span></span><br><span class="line"><span class="number">23</span>        moduleName = moduleName + (path.extname(moduleName)?<span class="string">''</span>:<span class="string">'.js'</span>); <span class="comment">// 判断是够有扩展名，如果没有，则加上</span></span><br><span class="line"><span class="number">24</span>        moduleName = <span class="string">'./'</span> + path.join(parentPath, moduleName); <span class="comment">// 拼接名字(./src + ./a.js = ./src/a.js)</span></span><br><span class="line"><span class="number">25</span>        dependcies.push(moduleName);</span><br><span class="line"><span class="number">26</span>        node.arguments = [types.stringLiteral(moduleName)]; <span class="comment">// 改变对应的值</span></span><br><span class="line"><span class="number">27</span>      &#125;</span><br><span class="line"><span class="number">28</span>    &#125;</span><br><span class="line"><span class="number">29</span>  &#125;)</span><br><span class="line"><span class="number">30</span>  <span class="keyword">let</span> sourceCode = generator(ast).code;</span><br><span class="line"><span class="number">31</span>  <span class="keyword">return</span> &#123;sourceCode, dependcies&#125;</span><br><span class="line"><span class="number">32</span>&#125;</span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">34</span><span class="comment">/**</span></span><br><span class="line"><span class="comment">35 * 功能:构建模块</span></span><br><span class="line"><span class="comment">36 * @param &#123;*&#125; modulePath entry 入口文件路径</span></span><br><span class="line"><span class="comment">37 * @param &#123;*&#125; isEntry   是否为主模块的依赖入口</span></span><br><span class="line"><span class="comment">38 */</span></span><br><span class="line"><span class="number">39</span> buildModule(modulePath, isEntry)&#123;</span><br><span class="line"><span class="number">40</span>  <span class="comment">// 拿到模块的内容</span></span><br><span class="line"><span class="number">41</span>  <span class="keyword">let</span> source = <span class="keyword">this</span>.getSource(modulePath);</span><br><span class="line"><span class="number">42</span>  <span class="comment">// 模块 id modulePath = modulePath - this.root (打包后后的 key 为相对路径)</span></span><br><span class="line"><span class="number">43</span>  <span class="keyword">let</span> moduleName = <span class="string">'./'</span> + path.relative(<span class="keyword">this</span>.root, modulePath); <span class="comment">// src/index.js</span></span><br><span class="line"><span class="number">44</span></span><br><span class="line"><span class="number">45</span>  <span class="comment">// 判断当前是否为主入口</span></span><br><span class="line"><span class="number">46</span>  <span class="keyword">if</span>(isEntry)&#123;</span><br><span class="line"><span class="number">47</span>    <span class="keyword">this</span>.entryId = moduleName;</span><br><span class="line"><span class="number">48</span>  &#125;</span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">50</span>  <span class="comment">// 解析 需要把 source 源码进行改造,返回一个依赖列表</span></span><br><span class="line"><span class="number">51</span>  <span class="comment">// 1、解析 require 2、将引入的模块路径前加 ./src</span></span><br><span class="line"><span class="number">52</span>  <span class="keyword">let</span> &#123;sourceCode, dependcies&#125; = <span class="keyword">this</span>.parse(source, path.dirname(moduleName));  <span class="comment">// 取 ./src</span></span><br><span class="line"><span class="number">53</span></span><br><span class="line"><span class="number">54</span>  <span class="comment">// 装载模块(把相对路径和模块中的内容 对应起来)</span></span><br><span class="line"><span class="number">55</span>  <span class="keyword">this</span>.modules[moduleName] = sourceCode</span><br><span class="line"><span class="number">56</span></span><br><span class="line"><span class="number">57</span>  <span class="comment">// 递归，继续解析文件中的依赖文件 —— 附模块的加载</span></span><br><span class="line"><span class="number">58</span>  dependcies.forEach(<span class="function"><span class="params">depPath</span>=&gt;</span>&#123;</span><br><span class="line"><span class="number">59</span>    <span class="keyword">this</span>.buildModule(path.join(<span class="keyword">this</span>.root,depPath), <span class="literal">false</span>);</span><br><span class="line"><span class="number">60</span>  &#125;)</span><br><span class="line"><span class="number">61</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AST-语法树递归解析&quot;&gt;&lt;a href=&quot;#AST-语法树递归解析&quot; class=&quot;headerlink&quot; title=&quot;AST 语法树递归解析&quot;&gt;&lt;/a&gt;AST 语法树递归解析&lt;/h1&gt;&lt;p&gt;webpack 通过文件路径加载模块后，开始对源码进行解析，将其转换
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
      <category term="webpack" scheme="https://ysatiche.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Vuex</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-vuex/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-vuex/</id>
    <published>2021-07-16T14:26:40.664Z</published>
    <updated>2021-07-16T14:26:40.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h1><h2 id="shared-object"><a href="#shared-object" class="headerlink" title="shared object"></a>shared object</h2><p>if we want to have a shared object in more reuseful vue component.we can get the object out like this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="shared-object-to-be-reactivity"><a href="#shared-object-to-be-reactivity" class="headerlink" title="shared object to be reactivity"></a>shared object to be reactivity</h2><p>if <code>count</code> can be reactivity, using Vue, we know the data defined in vue is reactivity. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> state = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> () &#123;</span></span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line">      state.inc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>we can change the syntax style. make it more like vuex syntax</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> <span class="params">(&#123; state, mutations &#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    data: &#123; state &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      commit (mutationType) &#123;</span><br><span class="line"><span class="actionscript">        mutations[mutationType](<span class="keyword">this</span>.state)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> store = createStore(&#123;</span></span><br><span class="line">  state: &#123; count: 0 &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    inc (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, store.state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      store.commit(<span class="string">'inc'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VUEX&quot;&gt;&lt;a href=&quot;#VUEX&quot; class=&quot;headerlink&quot; title=&quot;VUEX&quot;&gt;&lt;/a&gt;VUEX&lt;/h1&gt;&lt;h2 id=&quot;shared-object&quot;&gt;&lt;a href=&quot;#shared-object&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://ysatiche.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://ysatiche.github.io/tags/vue2/"/>
    
      <category term="vuex" scheme="https://ysatiche.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Plugin</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-plugin/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-plugin/</id>
    <published>2021-07-16T14:26:40.663Z</published>
    <updated>2021-07-16T14:26:40.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><h2 id="write-plugins-in-vue2"><a href="#write-plugins-in-vue2" class="headerlink" title="write plugins in vue2"></a>write plugins in vue2</h2><p>there are two common methods to write plugins in vue2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// plugin code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and use Vue.mixins</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(options)</span><br></pre></td></tr></table></figure><h2 id="write-a-simple-validation-plugin"><a href="#write-a-simple-validation-plugin" class="headerlink" title="write a simple validation plugin"></a>write a simple validation plugin</h2><p>create a plugin that teaches Vue components to handle a custom “rules” option. The rules option expects an object that specifies validation rules for data in the component.</p><p>Expected usage:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">foo</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      validate: <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">1</span>,</span><br><span class="line">      message: <span class="string">'foo must be greater than one'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Solution</p><p>In vue2, you can use <code>this.$options.rule</code> to get <code>rule</code> defined in Vue.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RulesPlugin = &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.rules) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.$options.rules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rule = <span class="keyword">this</span>.$options.rules[key]</span><br><span class="line">            <span class="keyword">this</span>.$watch(key, newValue =&gt; &#123;</span><br><span class="line">              <span class="keyword">const</span> result = rule.validate(newValue)</span><br><span class="line">              <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(rule.message)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(RulesPlugin)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Plugin&quot;&gt;&lt;a href=&quot;#Plugin&quot; class=&quot;headerlink&quot; title=&quot;Plugin&quot;&gt;&lt;/a&gt;Plugin&lt;/h1&gt;&lt;h2 id=&quot;write-plugins-in-vue2&quot;&gt;&lt;a href=&quot;#write-plugins-in
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://ysatiche.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://ysatiche.github.io/tags/vue2/"/>
    
      <category term="plugin" scheme="https://ysatiche.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Reactivity</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-reactivity/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-reactivity/</id>
    <published>2021-07-16T14:26:40.663Z</published>
    <updated>2021-07-16T14:26:40.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h1><h2 id="what’s-reactivity"><a href="#what’s-reactivity" class="headerlink" title="what’s reactivity?"></a>what’s reactivity?</h2><p>let us show an example on relationship with variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// if we want b to change when a changed</span></span><br><span class="line">b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><p>so if we have a function to exec when a changed. let us say.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onAChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b = a * <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>now, when we move to DOM.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cell b1"</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// when a change</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'cell.b'</span>).textContent = state.a * <span class="number">10</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// in other expression</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>in react.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line">setState(&#123; <span class="attr">a</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p>vue use <code>Object.defineProperty</code> to catch variable get and set.</p><blockquote><p><code>Object.defineProperty</code> basic usage</p></blockquote><p><code>Object.defineProperty(obj, prop, descriptor)</code></p><p><code>obj</code> object to defined prop.</p><p><code>prop</code> object prop to defined</p><p><code>descriptor</code> descriptor for defination</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'key'</span>, &#123;</span><br><span class="line">  <span class="comment">// enumerable: true if and only if the type of this property descriptor may be changed and </span></span><br><span class="line">  <span class="comment">// if the property may be deleted from the corresponding object</span></span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// configurable: true if and only if this property shows up during enumeration of the properties</span></span><br><span class="line">  <span class="comment">// on the corresponding object.</span></span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// writable: true if and only if the value associated with the property may be changed</span></span><br><span class="line">  <span class="comment">// with an assignment operator.</span></span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// A function which serves as a getter for the property, or undefined if there is no getter.</span></span><br><span class="line">  <span class="keyword">get</span> () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// A function which serves as a setter for the property, or undefined if there is no setter.</span></span><br><span class="line">  <span class="keyword">set</span> (newVal) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>we can take an exercise for <code>Object.defineProperty</code></p><h3 id="EXERCISE"><a href="#EXERCISE" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><p>Implement a convert function that</p><ul><li><p>take an Object as the argument</p></li><li><p>convert the Object’s property to place into getter/setters using Object.defineProperty.</p></li><li><p>The converted object should retain origin behavior, but at the sanme time log all the get/set operations.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalVal = obj[key]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;internalVal&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> internalVal</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;newValue&#125;</span>"`</span>)</span><br><span class="line">        internalVal = newValue </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if we want build a data reactivity system, as for a variable, we should know which other variable rely on this variable.Just like above</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li><p><code>b</code> is rely on <code>a</code>.But where can we find these dependency, yep, we can catch it by <code>Object.defineProperty get</code> if <code>b</code> want to get <code>a</code>, now <code>b</code> is <code>a</code> dependency, we can catch <code>b</code> from <code>a</code> get function.</p></li><li><p>if we have collect <code>a</code> dependency, next thing is that we should nofity <code>a</code> all dependency to update when <code>a</code> changed(just like tell <code>b</code> that <code>a</code> is different, so you should update), where can we do thiese thing, yep we can do this in <code>a</code> set function.</p><p>these are two main rules in build reactivity system, you should undestand it.</p><p>But what really we do in vue2, please keep watching.</p></li></ul><h2 id="collect-dependency"><a href="#collect-dependency" class="headerlink" title="collect dependency"></a>collect dependency</h2><h3 id="EXERCISE-Dependency"><a href="#EXERCISE-Dependency" class="headerlink" title="EXERCISE Dependency"></a>EXERCISE Dependency</h3><ul><li><p>create Dep class with two methods: depend and notify</p></li><li><p>create an autorun function that takes an updater function.</p></li><li><p>Inside the update function, you can explicitly depend on an instance of Dep by calling dep.depend()</p></li><li><p>later, you can triggle the update function to run aigain by calling dep.notify()</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subcribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set-watcher"><a href="#set-watcher" class="headerlink" title="set watcher"></a>set watcher</h2><h3 id="EXERCISE-Observer"><a href="#EXERCISE-Observer" class="headerlink" title="EXERCISE Observer"></a>EXERCISE Observer</h3><p>Combine the previous two functions, renaming convert() to observe() and keeping autorun():</p><ul><li><p>observe(): converts the properties in the received object and make them reactive.For each converted peroperty, it gets assigned a Dep instance which keeps tracks of a list of subscribing update function, and triggers them to re-run when its setter is invoked.</p></li><li><p>autorun(): takes an update function and re-runs it when properties that the update function subcribes to have been mutated. An update function is said to be “subscribe” to a property if it relies on that property during its evalution.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reactivity&quot;&gt;&lt;a href=&quot;#Reactivity&quot; class=&quot;headerlink&quot; title=&quot;Reactivity&quot;&gt;&lt;/a&gt;Reactivity&lt;/h1&gt;&lt;h2 id=&quot;what’s-reactivity&quot;&gt;&lt;a href=&quot;#what
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://ysatiche.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://ysatiche.github.io/tags/vue2/"/>
    
      <category term="reactivity" scheme="https://ysatiche.github.io/tags/reactivity/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Render</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-render/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue2-render/</id>
    <published>2021-07-16T14:26:40.663Z</published>
    <updated>2021-07-16T14:26:40.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h1><h2 id="what’s-render-include-DOM-and-virtual-DOM"><a href="#what’s-render-include-DOM-and-virtual-DOM" class="headerlink" title="what’s render?(include DOM and virtual DOM)"></a>what’s render?(include DOM and virtual DOM)</h2><p>Let’s see the Vue Reactivity System.</p><p><img src="../IMAGES/vue2-render-renderSystem.png" alt="Vue Reactivity System"></p><p>In Vue2, Template (when we write *.vue file) it would be</p><p>-&gt; (compiled into) Render Function</p><p>-&gt; (returns) Virtual DOM</p><p>-&gt; (generates) Actual DOM</p><p>so, what’s diffirence between Virtual DOM and Actual DOM</p><blockquote><p>Actual DOM</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"[Object HTMLDivElement]"</span> Browser Native <span class="built_in">Object</span> (expensive)</span><br></pre></td></tr></table></figure><blockquote><p>Virtual DOM</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm.$createElement(<span class="string">'div'</span>)</span><br><span class="line">&#123; <span class="attr">tag</span>: <span class="string">'div'</span>, <span class="attr">data</span>: &#123; <span class="attr">attrs</span>: &#123;&#125;&#125;, <span class="attr">children</span>: [] &#125; Plain Javascript <span class="built_in">Object</span> (cheap)</span><br></pre></td></tr></table></figure><p>As picture shows, vue2 use Component Render Function to generate Virtual DOM Tree, so we should understand Component Render Function first if we want to understand whole Vue Render System.</p><h2 id="Vue-Render-Function-API-usage"><a href="#Vue-Render-Function-API-usage" class="headerlink" title="Vue Render Function API usage"></a>Vue Render Function API usage</h2><p>Render Function <code>h()</code> in Vue is the Key Function to render DOM.</p><p>there are basic usages below.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">'div'</span>, <span class="string">'some text'</span>)</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span>, &#123; <span class="attr">class</span>: <span class="string">'foo'</span> &#125;, <span class="string">'some text'</span> )</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span> &#123; &#125;, [</span><br><span class="line">  <span class="string">'some text'</span>,</span><br><span class="line">  h(<span class="string">'span'</span>, <span class="string">'bar'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><blockquote><p>h can directly render a component</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">h(MyComponent, &#123;</span><br><span class="line">  props: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Render Exercise in Vue2.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### EXERCISE render tags</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Implement the 'example' component which given the following usage:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>html</span><br><span class="line">&lt;example :tags=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>which renders the expected output:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'tags'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>if example is a functional component, code may write like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'tags'</span>]</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render (h, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, context.props.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-render-Component"><a href="#EXERCISE-render-Component" class="headerlink" title="EXERCISE render Component"></a>EXERCISE render Component</h3><ul><li><p>Implement a Foo component wihich simple render <code>&lt;div&gt;foo&lt;/div&gt;</code>, and a Bar component which simple renders <code>&lt;div&gt;bar&lt;/div&gt;</code> (using render function obviously)</p></li><li><p>Implement an <example> component which renders the Foo component or the Bar component based on its <code>ok</code> prop. For <example> if ok is true, the final renderd dom should be <code>&lt;div&gt;foo&lt;/div&gt;</code></p></li><li><p>Implement a button in the root component that toggles <code>&lt;example&gt;</code> between <code>Foo</code> and <code>Bar</code> by controlling its <code>ok</code> prop.</p></li></ul><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:ok</span>=<span class="string">"ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok = !ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Foo = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'foo'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Bar = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'bar'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'ok'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.ok ? h(Foo) : h(Bar)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    data: &#123; ok: <span class="literal">true</span> &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Higher-Order-Component"><a href="#EXERCISE-Higher-Order-Component" class="headerlink" title="EXERCISE Higher Order Component"></a>EXERCISE Higher Order Component</h3><ul><li><p>Implement a withAvatarURL helper which takes an inner component that expects a <code>url</code> prop, and return a higher-order component that accepts a <code>username</code> prop instead. The higher-order component should be responsible for fetching the curresponding svatar url from a mocked API.</p></li><li><p>Before the API returns, the higher-order component should be passing a placeholder URL <a href="http://test.com/test.png" target="_blank" rel="noopener">http://test.com/test.png</a> to the inner component.</p></li></ul><p>The exercise provides a base <code>Avatar</code> component. The usage should look like this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">smart-avatar</span> <span class="attr">username</span>=<span class="string">"vuejs"</span>&gt;</span><span class="tag">&lt;/<span class="name">smart-avatar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fetchURL</span> <span class="params">(username, cb)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTiemout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">      cb(<span class="string">'http://test.url'</span>)</span></span><br><span class="line">    &#125;, 500)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Avatar = &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'src'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"src"</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">withAvatarURL</span> <span class="params">(InnerComponent)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'username'</span>],</span></span><br><span class="line">      created () &#123;</span><br><span class="line"><span class="actionscript">        fetchURL(<span class="keyword">this</span>.username, url =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.url = url</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; url: <span class="string">'http://test.com/test.png'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      render (h) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> h (Avatar, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line"><span class="actionscript">            src: <span class="keyword">this</span>.url</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    component: &#123; SmartAvatar &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Render&quot;&gt;&lt;a href=&quot;#Render&quot; class=&quot;headerlink&quot; title=&quot;Render&quot;&gt;&lt;/a&gt;Render&lt;/h1&gt;&lt;h2 id=&quot;what’s-render-include-DOM-and-virtual-DOM&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://ysatiche.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://ysatiche.github.io/tags/vue2/"/>
    
      <category term="render" scheme="https://ysatiche.github.io/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>Vue Basic Intro</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue-basic/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/vue-basic/</id>
    <published>2021-07-16T14:26:40.662Z</published>
    <updated>2021-07-16T14:26:40.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h1><p>let us show an example on relationship with variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// if we want b to change when a changed</span></span><br><span class="line">b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><p>so if we have a function to exec when a changed. let us say.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onAChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b = a * <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>now, when we move to DOM.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cell b1"</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// when a change</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'cell.b'</span>).textContent = state.a * <span class="number">10</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// in other expression</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>in react.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line">setState(&#123; <span class="attr">a</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE"><a href="#EXERCISE" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><p>Implement a convert function that</p><ul><li><p>take an Object as the argument</p></li><li><p>convert the Object’s property to place into getter/setters using Object.defineProperty.</p></li><li><p>The converted object should retain origin behavior, but at the sanme time log all the get/set operations.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalVal = obj[key]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;internalVal&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> internalVal</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;newValue&#125;</span>"`</span>)</span><br><span class="line">        internalVal = newValue </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Dependency"><a href="#EXERCISE-Dependency" class="headerlink" title="EXERCISE Dependency"></a>EXERCISE Dependency</h3><ul><li><p>create Dep class with two methods: depend and notify</p></li><li><p>create an autorun function that takes an updater function.</p></li><li><p>Inside the update function, you can explicitly depend on an instance of Dep by calling dep.depend()</p></li><li><p>later, you can triggle the update function to run aigain by calling dep.notify()</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subcribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Observer"><a href="#EXERCISE-Observer" class="headerlink" title="EXERCISE Observer"></a>EXERCISE Observer</h3><p>Combine the previous two functions, renaming convert() to observe() and keeping autorun():</p><ul><li><p>observe(): converts the properties in the received object and make them reactive.For each converted peroperty, it gets assigned a Dep instance which keeps tracks of a list of subscribing update function, and triggers them to re-run when its setter is invoked.</p></li><li><p>autorun(): takes an update function and re-runs it when properties that the update function subcribes to have been mutated. An update function is said to be “subscribe” to a property if it relies on that property during its evalution.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><p>two methods to write plugins</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// plugin code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.mixin(options)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-simple-plugin"><a href="#EXERCISE-simple-plugin" class="headerlink" title="EXERCISE simple plugin"></a>EXERCISE simple plugin</h3><p>create a plugin that teaches Vue components to handle a custom “rules” option. The rules option expects an object that specifies validation rules for data in the component.</p><p>Expected usage:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> RulesPlugin = &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.rules) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.$options.rules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rule = <span class="keyword">this</span>.$options.rules[key]</span><br><span class="line">            <span class="keyword">this</span>.$watch(key, newValue =&gt; &#123;</span><br><span class="line">              <span class="keyword">const</span> result = rule.validate(newValue)</span><br><span class="line">              <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(rule.message)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(RulesPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">foo</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      validate: <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">1</span>,</span><br><span class="line">      message: <span class="string">'foo must be greater than one'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h1><p>Template<br>-&gt; (compiled into) Render Function<br>-&gt; (returns) Virtual DOM<br>-&gt; (generates) Actual DOM</p><blockquote><p>Actual DOM</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&#39;div&#39;)</span><br><span class="line"></span><br><span class="line">&quot;[Object HTMLDivElement]&quot; Browser Native Object (expensive)</span><br></pre></td></tr></table></figure><blockquote><p>Virtual DOM</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm.$createElement(&#39;div&#39;)</span><br><span class="line">&#123; tag: &#39;div&#39;, data: &#123; attrs: &#123;&#125;&#125;, children: [] &#125; Plain Javascript Object (cheap)</span><br></pre></td></tr></table></figure><h3 id="Vue-Render-Function-API"><a href="#Vue-Render-Function-API" class="headerlink" title="Vue Render Function API"></a>Vue Render Function API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;&#125;, [])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>examples</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">'div'</span>, <span class="string">'some text'</span>)</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span>, &#123; <span class="attr">class</span>: <span class="string">'foo'</span> &#125;, <span class="string">'some text'</span> )</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span> &#123; &#125;, [</span><br><span class="line">  <span class="string">'some text'</span>,</span><br><span class="line">  h(<span class="string">'span'</span>, <span class="string">'bar'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><blockquote><p>h can directly render a component</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">h(MyComponent, &#123;</span><br><span class="line">  props: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-render-tags"><a href="#EXERCISE-render-tags" class="headerlink" title="EXERCISE render tags"></a>EXERCISE render tags</h3><p>Implement the ‘example’ component which given the following usage:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br></pre></td></tr></table></figure><p>which renders the expected output:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'tags'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>if example is a functional component, code may write like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'tags'</span>]</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render (h, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, context.props.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-render-Component"><a href="#EXERCISE-render-Component" class="headerlink" title="EXERCISE render Component"></a>EXERCISE render Component</h3><ul><li><p>Implement a Foo component wihich simple render <code>&lt;div&gt;foo&lt;/div&gt;</code>, and a Bar component which simple renders <code>&lt;div&gt;bar&lt;/div&gt;</code> (using render function obviously)</p></li><li><p>Implement an <example> component which renders the Foo component or the Bar component based on its <code>ok</code> prop. For <example> if ok is true, the final renderd dom should be <code>&lt;div&gt;foo&lt;/div&gt;</code></p></li><li><p>Implement a button in the root component that toggles <code>&lt;example&gt;</code> between <code>Foo</code> and <code>Bar</code> by controlling its <code>ok</code> prop.</p></li></ul><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:ok</span>=<span class="string">"ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok = !ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Foo = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'foo'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Bar = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'bar'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'ok'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.ok ? h(Foo) : h(Bar)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    data: &#123; ok: <span class="literal">true</span> &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Higher-Order-Component"><a href="#EXERCISE-Higher-Order-Component" class="headerlink" title="EXERCISE Higher Order Component"></a>EXERCISE Higher Order Component</h3><ul><li><p>Implement a withAvatarURL helper which takes an inner component that expects a <code>url</code> prop, and return a higher-order component that accepts a <code>username</code> prop instead. The higher-order component should be responsible for fetching the curresponding svatar url from a mocked API.</p></li><li><p>Before the API returns, the higher-order component should be passing a placeholder URL <a href="http://test.com/test.png" target="_blank" rel="noopener">http://test.com/test.png</a> to the inner component.</p></li></ul><p>The exercise provides a base <code>Avatar</code> component. The usage should look like this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">smart-avatar</span> <span class="attr">username</span>=<span class="string">"vuejs"</span>&gt;</span><span class="tag">&lt;/<span class="name">smart-avatar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fetchURL</span> <span class="params">(username, cb)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTiemout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">      cb(<span class="string">'http://test.url'</span>)</span></span><br><span class="line">    &#125;, 500)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Avatar = &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'src'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"src"</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">withAvatarURL</span> <span class="params">(InnerComponent)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'username'</span>],</span></span><br><span class="line">      created () &#123;</span><br><span class="line"><span class="actionscript">        fetchURL(<span class="keyword">this</span>.username, url =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.url = url</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; url: <span class="string">'http://test.com/test.png'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      render (h) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> h (Avatar, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line"><span class="actionscript">            src: <span class="keyword">this</span>.url</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    component: &#123; SmartAvatar &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h1><h3 id="shared-object"><a href="#shared-object" class="headerlink" title="shared object"></a>shared object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>if <code>count</code> can be reactivity, using Vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> state = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> () &#123;</span></span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line">      state.inc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>we can use more vuex like sytax</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> <span class="params">(&#123; state, mutations &#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    data: &#123; state &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      commit (mutationType) &#123;</span><br><span class="line"><span class="actionscript">        mutations[mutationType](<span class="keyword">this</span>.state)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> store = createStore(&#123;</span></span><br><span class="line">  state: &#123; count: 0 &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    inc (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, store.state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      store.commit(<span class="string">'inc'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="vue-route"><a href="#vue-route" class="headerlink" title="vue route"></a>vue route</h1><h3 id="EXERCISE-1"><a href="#EXERCISE-1" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><ul><li><p>display foo component when url is #foo</p></li><li><p>display bar component when url is #bar</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">    foo: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    bar: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>using route table</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;bar&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;foo&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;not found&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> routeTable = &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="string">'bar'</span>: Bar,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'foo'</span>: Foo,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'notfound'</span>: NotFound</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    h(routeTable[<span class="keyword">this</span>.url])</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reactivity&quot;&gt;&lt;a href=&quot;#Reactivity&quot; class=&quot;headerlink&quot; title=&quot;Reactivity&quot;&gt;&lt;/a&gt;Reactivity&lt;/h1&gt;&lt;p&gt;let us show an example on relationship
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://ysatiche.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://ysatiche.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>fontend/awesome-vue/readme</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/readme/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/readme/</id>
    <published>2021-07-16T14:26:40.662Z</published>
    <updated>2021-07-16T14:26:40.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="awesome-vue"><a href="#awesome-vue" class="headerlink" title="awesome-vue"></a>awesome-vue</h1><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><ul><li><a href="">simple-vuex-demo.md</a> - 实现一个简单的vuex例子</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;awesome-vue&quot;&gt;&lt;a href=&quot;#awesome-vue&quot; class=&quot;headerlink&quot; title=&quot;awesome-vue&quot;&gt;&lt;/a&gt;awesome-vue&lt;/h1&gt;&lt;h2 id=&quot;Content&quot;&gt;&lt;a href=&quot;#Content&quot; c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>fontend/awesome-vue/simple-vuex-demo</title>
    <link href="https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/simple-vuex-demo/"/>
    <id>https://ysatiche.github.io/2021/07/16/fontend/awesome-vue/simple-vuex-demo/</id>
    <published>2021-07-16T14:26:40.662Z</published>
    <updated>2021-07-16T14:26:40.662Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapGetters</span>(<span class="params">getterNameArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!getterNameArray || !getterNameArray.length) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line">  getterNameArray.forEach(<span class="function"><span class="params">getterName</span> =&gt;</span> &#123;</span><br><span class="line">    getters[getterName] = <span class="function"><span class="params">()</span> =&gt;</span> service[getterName];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> getters;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapActions</span>(<span class="params">actionNameArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!actionNameArray || !actionNameArray.length) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line">  actionNameArray.forEach(<span class="function"><span class="params">actionName</span> =&gt;</span> &#123;</span><br><span class="line">    actions[actionName] = <span class="function">(<span class="params">...params</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> service[actionName](...params);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> actions;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; mapActions, mapGetters, service &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
